public class CodeBattleBoost extends EBoost {
	public static TaskList task_list;
	public static SortedTreeIntListPoint build_positions;
	
	int goto_build(int cat) {
		ListPoint list; point pos;
		
		list = build_positions.get(cat);
		pos = list.back();
		list.pop_back();
		
		if (goto_p(pos) != 0) {
			return 1;
		}
		
		if (drop() != 0) {
			return 1;
		}
		
		if (build(cat) != 0) {
			return 1;
		}
		
		return 0;
	}
	
	bool same_river_side(object item) {
		if (item == null or item.position.y == nan) {
			return false;
		}
		
		return item.position.y * actor.position.y > 0;
	}
	
	/*private*/ void _wait_until(float time_goal) {
		float time_curr;
		
		time_curr = abstime();
		
		if (time_curr > time_goal) {
			return;
		}
		
		wait(time_goal - time_curr);
	}
	
	public ListPoint list_point_1(float ax, float ay, float az) {
		ListPoint list;
		
		list = new ListPoint();
		list.push_back(new point(ax, ay, az));
		
		return list;
	}
	
	public ListPoint list_point_2(float ax, float ay, float az, float bx, float by, float bz) {
		ListPoint list;
		
		list = new ListPoint();
		list.push_back(new point(ax, ay, az));
		list.push_back(new point(bx, by, bz));
		
		return list;
	}
	
	public void setup() {
		task_list.push_back(new GoalPowerCell());
		task_list.push_back(new GoalPowerPlant());
	}
	
	// Where task should Resolved -> Closed ?
	public void loop() {
		Goal goal; ListIteratorGoal it; float iter_start_time;
		
		iter_start_time = abstime();
		
		for (it = task_list.rbegin();; it.shift()) {
			if (it.is_null()) {
				log("There is no more tasks in the list");
				this._wait_until(iter_start_time + 1.0);
				return;
			}
			
			goal = it.value();
			goal.assign(actor);
			goal.change_state(new TaskStateInInvestigation());
			
			if (goal.check_prerequirements()) {
				break;
			}
			
			goal.change_state(new TaskStateProposed());
		}
		
		goal.change_state(new TaskStateActive());  
		
		if (goal.make() == 0) {
			// goal.change_state(new TaskStateResolved());
			this.task_list._unlink_elem(it.get_elem());  // remove task from list instead
			return;
		}
		
		goal.change_state(new TaskStateFailed());
		this._wait_until(iter_start_time + 1.0);
	}
}

public class GoalCodeBattle extends Goal {
	/*protected*/ CodeBattleBoost cb = new CodeBattleBoost();
	/*protected Goal[] depends; // unused */
	private TaskState _state = null;
	
	public void assign(object actor) {
		cb.actor = actor;
		
		if (this._state == null) {
			this._state = new TaskStateProposed();
		}
	}
	
	public void change_state(TaskState state) {
		cb.log("info change_state (" + this.to_str() + ") from " + this._state.to_str() + " to " + state.to_str());
		this._state = state;
		// super.change_state(state);
	}
	
	public TaskState get_state() {
		return this._state;
	}
	
	public string to_str() {
		return "CodeBattleGoal";
	}
	
	/*protected*/ bool _add_goal(bool flag, Goal goal) {
		if (not flag) {
			cb.task_list.push_back_uniq(goal);
		}
		
		return flag;
	}
	
	/*protected*/ bool _required_item(int cat) {
		object item;
		cb.assert(cb.is_item(cat)).id;
		
		item = cb.radar_item(new RadarArgs(cat), true, true, false);  // TODO: fails here
		return item != null and cb.same_river_side(item);
	}
	
	/*protected*/ bool _required_structure(int cat) {
		object item;
		cb.assert(cb.is_structure(cat)).id;
		
		item = radar(cat);
		//return item != null and cb.same_river_side(item) and not item.busy() and not cb.is_blocked(item);
		return item != null and cb.same_river_side(item);
	}
}

public class GoalResource extends GoalCodeBattle {
	public string to_str() {
		return "GoalResource";
	}
}

public class GoalTitanium extends GoalResource {
	public bool check_prerequirements() {
		return true
		and super._add_goal(super._required_structure(Converter), new GoalConverter())
		and super._required_item(TitaniumOre);
	}
	
	public int make() {
		// TODO: first goto Derrick and wait for TitaniumOre and it should not be required
		
		if (cb.goto_grab(TitaniumOre) != 0) {
			return 1;
		}
		
		if (cb.goto_radar_position(new RadarArgs(Converter)) != 0) {
			return 1;
		}
		
		if (drop() != 0) {
			return 1;
		}
		
		if (move(-2.5) != 0) {
			return 1;
		}
		
		return 0;
	}
	
	public float get_resolve_time() {
		return 2 + 0.5 + 2 + 0.5;
	}
	
	public float get_close_time() {
		return get_resolve_time() + 15/*convert*/;
	}
	
	public string to_str() {
		return "GoalTitanium";
	}
}

public class GoalPowerCell extends GoalResource {
	public bool check_prerequirements() {
		return true
		and super._add_goal(super._required_structure(PowerPlant), new GoalPowerPlant())
		and super._required_item(Titanium);
	}
	
	public int make() {
		if (cb.goto_grab(Titanium) != 0) {
			return 1;
		}
		
		if (cb.goto_radar_position(new RadarArgs(PowerPlant)) != 0) {
			return 1;
		}
		
		if (grab() != 0) {  // grab_from_slot
			return 1;
		}
		
		return 0;
	}
	
	public float get_resolve_time() {
		return 0.5 + 2 + 0.5 + 2;
	}
	
	public float get_close_time() {
		return get_resolve_time() + 12/*convert*/;
	}
	
	public string to_str() {
		return "GoalPowerCell";
	}
} 

public class GoalStructure extends GoalCodeBattle {
	protected int cat;
	
	void GoalStructure() {
		nan * 0;  // abstract class
	}
	
	public bool check_prerequirements() {
		return super._add_goal(super._required_item(Titanium), new GoalTitanium());
	}
	
	public int make() {
		cb.log("GoalStructure::make " + this.to_str());
		
		if (cb.goto_grab(Titanium) != 0) {
			return 1;
		}
		
		if (cb.goto_build(cat) != 0) {
			return 1;
		}
		
		return 0;
	}
	
	public float get_resolve_time() {
		return 2 + 0.5 + 15/*build*/ + 2;
	}
	
	public string to_str() {
		nan * 0;  // abstract mathod
		return "";
	}
}

public class GoalConverter extends GoalStructure {
	public void GoalConverter() {
		super.cat = Converter;
	}
	
	public string to_str() {
		return "GoalConverter";
	}
}

public class GoalCommonStructure extends GoalStructure {
	public void GoalCommonStructure() {
		nan * 0;  // abstract class
	}
	
	public bool check_prerequirements() {
		return true
		and super.check_prerequirements()
		and _add_goal(_required_structure(Converter), new GoalConverter());
	}
}

public class GoalDerrick extends GoalCommonStructure {
	public void GoalDerrick() {
		super.cat = Derrick;
	}
	
	public string to_str() {
		return "GoalDerrick";
	}
}

public class GoalPowerPlant extends GoalCommonStructure {
	public void GoalPowerPlant() {
		super.cat = PowerPlant;
	}
	
	public string to_str() {
		return "GoalPowerPlant";
	}
}

public class UnaryPredicateEqualGoal extends UnaryPredicateGoal {
	private Goal _value;
	
	void UnaryPredicateEqualGoal(Goal value) {
		this._value = value;
	}
	
	bool _(Goal value) {
		return this._value.equal(value);
	}
}

public class TaskList extends ListGoal {
	static CodeBattleBoost cb;
	
	public void log_task_list() {
		file handler; int i; ListIteratorGoal it;
		
		handler = new file();
		handler.open(cb.logfile, "a");
		
		for (it = super.begin(), i = 0; not it.is_null(); it.shift(), ++i) {
			handler.writeln(i + " " + it.value().to_str());
		}
		
		handler.close();
	}
	
	/*private*/ void _exit_on_overflow() {
		if (super.size() > 30) {
			cb.log("Task list is overflow. Exit program");
			this.log_task_list();
			nan * 0;  // exit
		}
	}
	
	public void push_back_uniq(Goal goal) {
		ListIteratorGoal it_same; UnaryPredicateGoal same_as_pushing; string size_change;
		
		same_as_pushing = new UnaryPredicateEqualGoal(goal);
		it_same = list_find_if(super.rbegin(), super.rend(), same_as_pushing);
		
		if (it_same.is_null()) {
			this.push_back(goal);
		}
	}
	
	public void push_back(Goal goal) {
		this._exit_on_overflow();
		super.push_back(goal);
		cb.log("push_back(" + goal.to_str() + "), size = " + super.size() + " [+]");  // move log ?
	}
}

/*point team_transform(point p) {
	if (team == 2) {
		p.x *= -1;
		p.y *= -1;
		p.z = 180 + p.z
	}
	
	return p;
}*/

extern void object::CodeBattleGoals() {
	CodeBattleBoost cb();
	
	// init cb
	cb.actor = this;
	
	// init static variables
	cb.task_list = new TaskList();
	cb.task_list.cb = cb;
	cb.build_positions = new SortedTreeIntListPoint(15);
	
	cb.build_positions.at_index(0).init(Derrick, null);
	cb.build_positions.at_index(1).init(BotFactory, null);
	cb.build_positions.at_index(2).init(PowerStation, null);
	cb.build_positions.at_index(3).init(Converter, cb.list_point_2(5, -50.5, 315, -5, -50.5, 225));
	cb.build_positions.at_index(4).init(RepairCenter, null);
	cb.build_positions.at_index(5).init(DefenseTower, null);
	cb.build_positions.at_index(6).init(ResearchCenter, null);
	cb.build_positions.at_index(7).init(PowerPlant, cb.list_point_1(15, -205, 0));
	cb.build_positions.at_index(8).init(AutoLab, null);
	cb.build_positions.at_index(9).init(NuclearPlant, null);
	cb.build_positions.at_index(10).init(ExchangePost, null);
	cb.build_positions.at_index(11).init(PowerCaptor, null);
	
	cb.setup();
	
	for (;;) {
		cb.loop();
	}
}

// WingedShooter x N
// 0) BotFactory
// 1) PowerPlant (to make PowerCell x N)
// 2) Converter (to make Titanium x N)
// 3) ResearchWinged
// 3.1) ResearchCenter
// 4) ResearchShooter
// 4.1) link to 3.1

// WingedGrabber ()
// 1) Titanium ()
// 2) PowerCell ()
// 2.1) Titanium ()
// 3) BotFactory ()
// 3.1) Titanium ()
// 4) ResearchWinged ()
// 4.1) PowerCell (full)
// 4.1.1) Titanium ()
// 4.1.2) PowerPlant ()
// 4.1.2.1) Titanium ()
// 4.2) ResearchCenter ()
// 4.2.1) Titanium ()
// 4.2.1.1) Converter ()
// 4.2.1.1.1) Titanium (v)

// For WingedGrabber
// T x 7
// C x 2

// For WingedShooter
// T x 10
// C x 4
