// Generated file.

public class MatrixElem_float { public void MatrixElem_float(float value = 0.0 , MatrixElem_float right = null , MatrixElem_float down = null ) { this.value = value; this.right = right; this.down = down; } public float value; public MatrixElem_float right; public MatrixElem_float down; }
public MatrixElem_float matrix_values(float v0 , float v1 , float v2 , float v3) { MatrixElem_float p0, p1; p0 = p1 = new MatrixElem_float(v0); p1 = p1.right = new MatrixElem_float(v1); p1 = p1.right = new MatrixElem_float(v2); p1 = p1.right = new MatrixElem_float(v3); return p0; }
public MatrixElem_float matrix_values(float v0 , float v1 , float v2 , float v3 , float v4 , float v5) { MatrixElem_float p0, p1; p0 = p1 = new MatrixElem_float(v0); p1 = p1.right = new MatrixElem_float(v1); p1 = p1.right = new MatrixElem_float(v2); p1 = p1.right = new MatrixElem_float(v3); p1 = p1.right = new MatrixElem_float(v4); p1 = p1.right = new MatrixElem_float(v5); return p0; }
public MatrixElem_float matrix_values(float v0 , float v1 , float v2 , float v3 , float v4 , float v5 , float v6 , float v7 , float v8) { MatrixElem_float p0, p1; p0 = p1 = new MatrixElem_float(v0); p1 = p1.right = new MatrixElem_float(v1); p1 = p1.right = new MatrixElem_float(v2); p1 = p1.right = new MatrixElem_float(v3); p1 = p1.right = new MatrixElem_float(v4); p1 = p1.right = new MatrixElem_float(v5); p1 = p1.right = new MatrixElem_float(v6); p1 = p1.right = new MatrixElem_float(v7); p1 = p1.right = new MatrixElem_float(v8); return p0; }

public class MatrixIterator_float {
protected MatrixElem_float _elem;

public void MatrixIterator_float(MatrixElem_float elem) {
this._elem = elem;
}

public MatrixIterator_float copy() {
return new MatrixIterator_float(this._elem);
}

public bool equal(MatrixIterator_float that) {
return this._elem == that._elem;
}

public bool is_null() {
return this._elem == null;
}

public float value() {
return this._elem.value;
}

public MatrixIterator_float shift() {
this._elem = this._elem.right;
return this;
}
}

public class MatrixIteratorVertical_float extends MatrixIterator_float {
public void MatrixIteratorVertical_float(MatrixElem_float elem) {
this._elem = elem;
}

public MatrixIteratorVertical_float copy() {
return new MatrixIteratorVertical_float(this._elem);
}

public MatrixIteratorVertical_float shift() {
this._elem = this._elem.down;
return this;
}
}

public class Matrix_float {
private MatrixElem_float _root;
private int _width;
private int _height;

private void _set_shape() {
MatrixElem_float p1, p2;

p1 = p2 = this._root;

repeat(this._width) {
p1 = p1.right;
}

for (;;) {
p2.down = p1;

if (p1.right == null) {
break;
}

p1 = p1.right;
p2 = p2.right;
}

p1 = this._root;

repeat(this._width - 1) {
p1 = p1.right;
p2 = p2.right;
p2.down = p1;
}
}

public void Matrix_float(int width, int height, MatrixElem_float values) {
this._width = width;
this._height = height;
this._root = values;
this._set_shape();
}

public MatrixIterator_float begin() {
return new MatrixIterator_float(this._root);
}

public MatrixIterator_float end() {
return new MatrixIterator_float(null);
}

public MatrixIteratorVertical_float vbegin() {
return new MatrixIteratorVertical_float(this._root);
}

public MatrixIteratorVertical_float vend() {
return new MatrixIteratorVertical_float(null);
}

public bool eq(Matrix_float that) {
MatrixElem_float p1, p2;

if (this._width != that._width or this._height != that._height) {
return false;
}

p1 = this._root;
p2 = that._root;

repeat(this._width * this._height) {
if (p1.value != p2.value) {
return false;
}

p1 = p1.right;
p2 = p2.right;
}

return true;
}

public bool ne(Matrix_float that) {
return not this.eq(that);
}

public string to_str() {
string res; MatrixIterator_float iter;

iter = this.begin();
res = "[";

for (int i = this._height - 1;; --i) {
res += "[";

for (int j = this._width - 1;; --j) {
res += iter.value();
iter.shift();

if (j <= 0) {
break;
}

res += ",";
}

res += "]";

if (i <= 0) {
break;
}

res += ",";
}

res += "]";
return res;
}

public float determenant() {
nan * 0;
return 0.0;
}

public Matrix_float inverse() {
nan * 0;
return null;
}

private MatrixElem_float _mul_helper(MatrixElem_float p_this, MatrixElem_float p_that) {
MatrixElem_float acc;

acc = new MatrixElem_float();
repeat(this._width) {
acc.value += p_this.value * p_that.value;
p_this = p_this.right;
p_that = p_that.down;
}

return acc;
}

public Matrix_float mul(Matrix_float that) {
MatrixElem_float p_this, p_that, p_out, p_dummy; Matrix_float res;

if (this._width != that._height) {
message("Can't multiply matrixes due it's sizes", DisplayError);
return null;
}

p_this = this._root;
p_that = that._root;
p_dummy = p_out = new MatrixElem_float();

repeat(this._height) {
repeat(that._width) {
p_out = p_out.right = this._mul_helper(p_this, p_that);
p_that = p_that.right;
}
p_this = p_this.down;
p_that = that._root;
}

res = new Matrix_float(this._height, that._width, p_dummy.right);
return res;
}
}

public Matrix_float matrix_eye_float(int size) {
MatrixElem_float p0, p1;

p0 = p1 = new MatrixElem_float(1.0);

repeat (size - 1) {
repeat (size) {
p1 = p1.right = new MatrixElem_float(0.0);
}

p1 = p1.right = new MatrixElem_float(1.0);
}

return new Matrix_float(size, size, p0);
}

public Matrix_float matrix_zeros_float(int width, int height) {
MatrixElem_float p0, p1;

p0 = p1 = new MatrixElem_float(0.0);

repeat (width * height - 1) {
p1 = p1.right = new MatrixElem_float(0.0);
}

return new Matrix_float(width, height, p0);
}

extern void Library_Matrix_float() {
}
