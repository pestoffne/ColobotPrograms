// Generated file.

public class MatrixElem_float { public void MatrixElem_float(float value = 0.0 , MatrixElem_float right = null , MatrixElem_float down = null ) { this.value = value; this.right = right; this.down = down; } public float value; public MatrixElem_float right; public MatrixElem_float down; }
public MatrixElem_float matrix_values(float v0 , float v1 , float v2 , float v3) { MatrixElem_float p0, p1; p0 = p1 = new MatrixElem_float(v0); p1 = p1.right = new MatrixElem_float(v1); p1 = p1.right = new MatrixElem_float(v2); p1 = p1.right = new MatrixElem_float(v3); return p0; }
public MatrixElem_float matrix_values(float v0 , float v1 , float v2 , float v3 , float v4 , float v5) { MatrixElem_float p0, p1; p0 = p1 = new MatrixElem_float(v0); p1 = p1.right = new MatrixElem_float(v1); p1 = p1.right = new MatrixElem_float(v2); p1 = p1.right = new MatrixElem_float(v3); p1 = p1.right = new MatrixElem_float(v4); p1 = p1.right = new MatrixElem_float(v5); return p0; }
public MatrixElem_float matrix_values(float v0 , float v1 , float v2 , float v3 , float v4 , float v5 , float v6 , float v7 , float v8) { MatrixElem_float p0, p1; p0 = p1 = new MatrixElem_float(v0); p1 = p1.right = new MatrixElem_float(v1); p1 = p1.right = new MatrixElem_float(v2); p1 = p1.right = new MatrixElem_float(v3); p1 = p1.right = new MatrixElem_float(v4); p1 = p1.right = new MatrixElem_float(v5); p1 = p1.right = new MatrixElem_float(v6); p1 = p1.right = new MatrixElem_float(v7); p1 = p1.right = new MatrixElem_float(v8); return p0; }
public MatrixElem_float matrix_values(float v0 , float v1 , float v2 , float v3 , float v4 , float v5 , float v6 , float v7 , float v8 , float v9 , float v10 , float v11 , float v12 , float v13 , float v14 , float v15) { MatrixElem_float p0, p1; p0 = p1 = new MatrixElem_float(v0); p1 = p1.right = new MatrixElem_float(v1); p1 = p1.right = new MatrixElem_float(v2); p1 = p1.right = new MatrixElem_float(v3); p1 = p1.right = new MatrixElem_float(v4); p1 = p1.right = new MatrixElem_float(v5); p1 = p1.right = new MatrixElem_float(v6); p1 = p1.right = new MatrixElem_float(v7); p1 = p1.right = new MatrixElem_float(v8); p1 = p1.right = new MatrixElem_float(v9); p1 = p1.right = new MatrixElem_float(v10); p1 = p1.right = new MatrixElem_float(v11); p1 = p1.right = new MatrixElem_float(v12); p1 = p1.right = new MatrixElem_float(v13); p1 = p1.right = new MatrixElem_float(v14); p1 = p1.right = new MatrixElem_float(v15); return p0; }

public class MatrixIterator_float {
protected MatrixElem_float _elem;

public void MatrixIterator_float(MatrixElem_float elem) {
this._elem = elem;
}

public MatrixIterator_float copy() {
return new MatrixIterator_float(this._elem);
}

public bool equal(MatrixIterator_float that) {
return this._elem == that._elem;
}

public bool is_null() {
return this._elem == null;
}

public float value() {
return this._elem.value;
}

public MatrixIterator_float shift() {
this._elem = this._elem.right;
return this;
}
}

public class MatrixIteratorVertical_float extends MatrixIterator_float {
public void MatrixIteratorVertical_float(MatrixElem_float elem) {
this._elem = elem;
}

public MatrixIteratorVertical_float copy() {
return new MatrixIteratorVertical_float(this._elem);
}

public MatrixIteratorVertical_float shift() {
this._elem = this._elem.down;
return this;
}
}

public class Matrix_float {
private MatrixElem_float _root;
private int _width;
private int _height;

public MatrixElem_float _root() {
return this._root;
}

private void _set_shape_mut() {
MatrixElem_float p1, p2;

p1 = p2 = this._root;

repeat (this._width) {
p1 = p1.right;
}

p2.down = p1;

repeat (this._width * (this._height - 1) - 1) {
p2 = p2.right;
p2.down = p1 = p1.right;
}

p1 = this._root;

repeat (this._width - 1) {
p2 = p2.right;
p2.down = p1 = p1.right;
}
}

public void Matrix_float(int width, int height, MatrixElem_float values) {
this._width = width;
this._height = height;
this._root = values;
this._set_shape_mut();
}

public MatrixIterator_float begin() {
return new MatrixIterator_float(this._root);
}

public MatrixIterator_float end() {
return new MatrixIterator_float(null);
}

public MatrixIteratorVertical_float vbegin() {
return new MatrixIteratorVertical_float(this._root);
}

public MatrixIteratorVertical_float vend() {
return new MatrixIteratorVertical_float(null);
}

public int width() {
return this._width;
}

public int height() {
return this._height;
}

public int count() {
return this._width * this._height;
}

public bool eq(Matrix_float that) {
MatrixElem_float p1, p2;

if (this._width != that._width or this._height != that._height) {
return false;
}

p1 = this._root;
p2 = that._root;

repeat(this._width * this._height) {
if (p1.value != p2.value) {
return false;
}

p1 = p1.right;
p2 = p2.right;
}

return true;
}

public bool ne(Matrix_float that) {
return not this.eq(that);
}

public string to_str() {
string res; MatrixIterator_float iter;

iter = this.begin();
res = "[";

for (int i = this._height - 1;; --i) {
res += "[";

for (int j = this._width - 1;; --j) {
res += iter.value();
iter.shift();

if (j <= 0) {
break;
}

res += ",";
}

res += "]";

if (i <= 0) {
break;
}

res += ",";
}

res += "]";
return res;
}

private MatrixElem_float _copy_values() {
MatrixElem_float p1, p2, root;


root = p2 = new MatrixElem_float(this._root.value);

for (p1 = this._root.right; p1 != null; p1 = p1.right) {
p2 = p2.right = new MatrixElem_float(p1.value);
}

return root;
}

private MatrixElem_float _copy_transposed() {
MatrixElem_float p1, p2, root;


root = p2 = new MatrixElem_float(this._root.value);

for (p1 = this._root.down; p1 != null; p1 = p1.down) {
p2 = p2.right = new MatrixElem_float(p1.value);
}

return root;
}

public Matrix_float copy() {
return new Matrix_float(this._width, this._height, this._copy_values());
}

private MatrixElem_float _at_y(int y) {
MatrixElem_float p;

p = this._root;

repeat (y) {
p = p.down;
}

return p;
}

private void _add_row_mut(MatrixElem_float p_from, MatrixElem_float p_to,
float coef, int width_m1) {
p_to.value += p_from.value * coef;

repeat (width_m1) {
p_to = p_to.right;
p_from = p_from.right;
p_to.value += p_from.value * coef;
}
}

private void _mul_row_mut(MatrixElem_float p, float coef, int width_m1) {
p.value *= coef;

repeat (width_m1) {
p = p.right;
p.value *= coef;
}
}

private void _triangulate_mut() {
MatrixElem_float p_diag, p_i; int x, size;


size = this._width;
p_diag = this._root;
x = size - 1;

p_i = p_diag;

repeat (x) {
p_i = p_i.down;
this._add_row_mut(p_diag, p_i, -p_i.value / p_diag.value, x);
}

repeat (x) {
--x;
p_diag = p_diag.right.down;

p_i = p_diag;

repeat (x) {
p_i = p_i.down;
this._add_row_mut(p_diag, p_i, -p_i.value / p_diag.value, x);
}
}
}

public float determenant() {
Matrix_float m; MatrixElem_float p; float acc;

m = this.copy();
m._triangulate_mut();



p = m._root;
acc = p.value;

repeat (this._width - 1) {
p = p.right.down;
acc *= p.value;
}

return acc;
}

public Matrix_float inverse() {
Matrix_float m1, m2; float coef; int x, y, size;
MatrixElem_float p1_diag, p1_diag_left, p1_diag_top, p1_i, p1_i_left, p2_diag_left, p2_i_left;


size = this._width;

m1 = this.copy();
m2 = matrix_eye_float(size);

x = 0;
p1_i = p1_i_left = p1_diag = p1_diag_left = p1_diag_top = m1._root;
p2_diag_left = p2_i_left = m2._root;

repeat (2147483647) {
y = 0;
p1_i_left = m1._root;
p2_i_left = m2._root;

coef = 1 / p1_diag.value;
m1._mul_row_mut(p1_diag_left, coef, size - 1);
m2._mul_row_mut(p2_diag_left, coef, size - 1);

repeat (2147483647) {
if (x != y) {
coef = -p1_i.value;
m1._add_row_mut(p1_diag_left, p1_i_left, coef, size - 1);
m2._add_row_mut(p2_diag_left, p2_i_left, coef, size - 1);
}

p1_i = p1_i.down;

if (++y >= size) {
break;
}

p1_i_left = p1_i_left.down;
p2_i_left = p2_i_left.down;
}

if (++x >= size) {
break;
}

p1_diag = p1_diag.right.down;
p1_diag_top = p1_diag_top.right;
p1_diag_left = p1_diag_left.down;
p2_diag_left = p2_diag_left.down;
}

return m2;
}

public Matrix_float transpose() {
return new Matrix_float(this._height, this._width, this._copy_transposed());
}

public void transpose_mut() {
MatrixElem_float p, tmp_p; int tmp_i;

for (p = this._root; p != null; p = p.right) {
tmp_p = p.right;
p.right = p.down;
p.down = tmp_p;
}

tmp_i = this._width;
this._width = this._height;
this._height = tmp_i;
}

public void add_mut(Matrix_float that) {
MatrixElem_float p1, p2;

p1 = this._root;
p2 = that._root;

repeat (this._width * this._height) {
p1.value += p2.value;
p1 = p1.right;
p2 = p2.right;
}
}

private MatrixElem_float _mul_helper(MatrixElem_float p_this, MatrixElem_float p_that) {
MatrixElem_float acc;

acc = new MatrixElem_float();
repeat(this._width) {
acc.value += p_this.value * p_that.value;
p_this = p_this.right;
p_that = p_that.down;
}

return acc;
}

public Matrix_float mul(Matrix_float that) {
MatrixElem_float p_this, p_that, p_out, p_dummy; Matrix_float res;

if (this._width != that._height) {
return null;
}

p_this = this._root;
p_that = that._root;
p_dummy = p_out = new MatrixElem_float();

repeat(this._height) {
repeat(that._width) {
p_out = p_out.right = this._mul_helper(p_this, p_that);
p_that = p_that.right;
}
p_this = p_this.down;
p_that = that._root;
}

res = new Matrix_float(that._width, this._height, p_dummy.right);
return res;
}
}

public Matrix_float matrix_eye_float(int size) {
MatrixElem_float p0, p1;

p0 = p1 = new MatrixElem_float(1.0);

repeat (size - 1) {
repeat (size) {
p1 = p1.right = new MatrixElem_float(0.0);
}

p1 = p1.right = new MatrixElem_float(1.0);
}

return new Matrix_float(size, size, p0);
}

public Matrix_float matrix_zeros_float(int width, int height) {
MatrixElem_float p0, p1;

p0 = p1 = new MatrixElem_float(0.0);

repeat (width * height - 1) {
p1 = p1.right = new MatrixElem_float(0.0);
}

return new Matrix_float(width, height, p0);
}

public Matrix_float matrix_full_float(int width, int height, float value) {
MatrixElem_float p0, p1;

p0 = p1 = new MatrixElem_float(value);

repeat (width * height - 1) {
p1 = p1.right = new MatrixElem_float(value);
}

return new Matrix_float(width, height, p0);
}

extern void Library_Matrix_float() {
}
