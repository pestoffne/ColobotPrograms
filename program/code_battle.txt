float object::AbsMin(float a, float b) {
	if (abs(a) < abs(b)) {
		return a;
	} else {
		return b;
	}
}

void object::WaitPowerCell() {
	while (energyCell == null) {
		wait(1);
	}
	wait(1);
}

public void object::HuntGround() {
	object item;
	
	WaitPowerCell();
	move(-11);
	goto(0, 70);
	
	int aliens[4];
	aliens[0] = AlienAnt;
	aliens[1] = AlienSpider;
	aliens[2] = AlienWasp;
	aliens[3] = AlienEgg;
	
	for (int tick = 0;; ++tick) {
		
		item = radar(aliens);
		
		if (item == null) {
			break;
		}
		
		turn(direction(item.position));
		item = radar(aliens, 0, 360, 0, 30);
		
		if (item != null) {
			float ay = atan((item.position.z - position.z - 1.5)
			            / distance2d(item.position, position))
			            - AbsMin(pitch, pitch - 360);
			float bx = ay * sin(roll);
			float by = ay * cos(roll);
			bool can_aim = bx >= -45 and bx <= 45 and by >= -20 and by <= 20;
			
			if (can_aim) {
				aim(by, bx);
				fire(0.07);
				
				//motor(1, 1);
				wait(0.63);
			}
		}
		
		motor(0.2, 0.2);
		wait(0.2);
	}
	
	message("Hunt is complete");
}

//--------------------------------------------------------------------------------------------------//

void object::CheckEnergyCell() {
	object item;
	
	if (energyCell.energyLevel > 0.2) {
		return;
	}
	
	item = radar(PowerStation);
	
	if (item == null) {
		return;
	}
	
	goto(item.position);
	
	while (energyCell.energyLevel < 1) {
		wait(1);
	}
}

object RadarWait(int cat, int angle=0, int focus=360, int min=0, int max=1000) {
	object item;
	
	for (;;) {
		item = radar(cat, angle, focus, min, max);
		
		if (item != null) {
			break;
		}
		
		wait(1);
	}
	
	return item;
}

void object::CollectNewPowerCell() {
	object item;
	
	item = radar(PowerPlant);
	goto(item.position);
	
	while (item.energyCell.category != PowerCell) {
		wait(1);
	}
	
	grab();
}

void object::CollectOneTitanium() {
	object item;
	
	CheckEnergyCell();
	
	item = RadarWait(TitaniumOre);
	goto(item.position);
	grab();
	
	item = radar(Converter);
	goto(item.position);
	drop();
	move(-2.5);
	
	item = RadarWait(Titanium, 0, 10, 0, 5);
	goto(item.position);
	grab();
}

void object::Fill(int cat) {
	object[] items;
	
	for (;;) {
		items = radarall(cat);
		
		for (int i = sizeof(items) - 1; i >= 0; --i) {
			if (items[i].energyCell == null) {
				goto(items[i].position);
				drop();
				return;
			}
		}
		
		wait(1);
	}
}

void object::Place(int a, int b, int c) {
	move(-1);
	turn(b);
	move(a);
	turn(c);
	move(5);
	drop();
}

extern void object::CodeBattle() {
	object item;
	point pos;
	
	grab();
	move(-9);
	drop();
	build(Converter);
	
	CollectOneTitanium();
	
	Place(10, 90, 90);
	build(PowerPlant);
	
	CollectOneTitanium();
	
	item = radar(PowerPlant);
	goto(item.position);
	drop();
	
	CollectOneTitanium();
	
	Place(10, 90, -90);
	build(ResearchCenter);
	
	CollectNewPowerCell();
	
	item = radar(ResearchCenter);
	goto(item.position);
	drop();
	item.research(ResearchShooter);
	
	CollectOneTitanium();
	
	Place(13, -90, -90);
	build(PowerStation);
	
	CollectOneTitanium();
	
	Place(26, -90, -90);
	build(BotFactory);
	
	item = radar(ResearchCenter);
	goto(item.position);
	grab();
	
	item = radar(PowerStation);
	goto(item.position);
	while (load.energyLevel < 1) {
		wait(1);
	}
	
	item = radar(ResearchCenter);
	goto(item.position);
	drop();
	item.research(ResearchWinged);
	
	for (;;) {
		CollectOneTitanium();
		
		item = radar(PowerPlant);
		goto(item.position);
		drop();
		
		CollectOneTitanium();
		
		item = radar(BotFactory);
		goto(item.position);
		drop();
		move(-5);
		item.factory(WingedShooter, "HuntGround");
		
		CollectNewPowerCell();
		move(-5);
		turn(90);
		Fill(WingedShooter);
	}
}
