// Generated file.


public class TreeNodeIntListPoint { public void TreeNodeIntListPoint(int key = 0 , ListPoint value = null , TreeNodeIntListPoint less = null , TreeNodeIntListPoint more = null ) { this.key = key; this.value = value; this.less = less; this.more = more; } public int key; public ListPoint value; public TreeNodeIntListPoint less; public TreeNodeIntListPoint more; }





public void TreeNodeIntListPoint::init(int key, ListPoint value) {
this.key = key;
this.value = value;
}

public class SortedTreeIntListPoint {
public TreeNodeIntListPoint root = null;
private int _size = 0;

private TreeNodeIntListPoint _create_subtree(int size) {
TreeNodeIntListPoint pointer;

if (0 == size) {
return null;
}

pointer = new TreeNodeIntListPoint();
--size;
pointer.less = this._create_subtree(ceil(size / 2));
pointer.more = this._create_subtree(floor(size / 2));
return pointer;
}

public void SortedTreeIntListPoint(int size) {
this._size = size;
this.root = this._create_subtree(size);
}

public ListPoint get(int key) {
TreeNodeIntListPoint pointer; int cmp;

pointer = this.root;

for (;;) {
cmp = ((pointer.key)-(key));

if (cmp > 0) {
pointer = pointer.less;
} else if (cmp < 0) {
pointer = pointer.more;
} else {
return pointer.value;
}
}

return null;
}

int _middle_index(int min_index, int max_index) {
return ceil((max_index - min_index) / 2) + min_index;;
}

TreeNodeIntListPoint _at_index_helper(TreeNodeIntListPoint node, int min_index, int max_index, int target_index) {
int current_index;

current_index = this._middle_index(min_index, max_index);

if (target_index == current_index) {
return node;
}

if (target_index > current_index) {
return this._at_index_helper(node.more, current_index + 1, max_index, target_index);
}

return this._at_index_helper(node.less, min_index, current_index - 1, target_index);
}

public TreeNodeIntListPoint at_index(int index) {
return this._at_index_helper(this.root, 0, this._size - 1, index);
}

public int size() {
return this._size;
}
}

extern void Library_TreeIntListPoint() {
}
