public class TestMatrix_float extends EBoost {
	private MatrixElem_float _elem_at(MatrixElem_float p, int x, int y) {
		repeat (x) {
			p = p.right;
		}
		
		repeat (y) {
			p = p.down;
		}

		return p;
	}
	
	private bool _check_structure(Matrix_float m) {
		MatrixElem_float p1, p2, root, last; int width, width_m1, height_m1;
		
		width = m.width();
		width_m1 = width - 1;
		height_m1 = m.height() - 1;
		root = m._root();
		last = _elem_at(root, width_m1, height_m1);
		
		// check last
		if (last.right != null or last.down != null) {
			return false;
		}
		
		// check line 1
		p1 = _elem_at(root, 0, height_m1);
		p2 = root;
		
		repeat (width_m1) {
			if (p1.down != p2.right) {
				return false;
			}
			
			p1 = p1.right;
			p2 = p2.right;
		}
		
		// check lines 2, 3, ...
		p1 = root;
		p2 = _elem_at(root, width_m1, 0);
		
		repeat (width * height_m1) {
			if (p1.down != p2.right) {
				return false;
			}
			
			p1 = p1.right;
			p2 = p2.right;
		}
		
		return true;
	}
	
	void test_matrix_mul_e() {
		Matrix_float m1, m2, m3, e;
		
		// prepare
		m1 = new Matrix_float(3, 3, matrix_values(
			1, 2, 3,
			4, 5, 6,
			7, 8, 9
		));
		
		e = matrix_eye_float(3);
		
		// test
		m2 = m1.mul(e);
		m3 = e.mul(m1);
		
		// assert
		assert(m1.eq(m2), "test_matrix_mul_e: error m1 != m2");
		assert(m1.eq(m3), "test_matrix_mul_e: error m1 != m3");
		assert(_check_structure(m2), "test_matrix_mul_e: error m2 structure");
		assert(_check_structure(m3), "test_matrix_mul_e: error m3 structure");
	}
	
	void test_matrix_mul() {
		Matrix_float m1, m2, m3, m4;
		
		// prepare
		m1 = new Matrix_float(2, 3, matrix_values(
			1, 2,
			3, 4,
			5, 6
		));
		
		m2 = new Matrix_float(3, 2, matrix_values(
			7, 8, 9,
			10, 11, 12
		));
		
		m3 = new Matrix_float(3, 3, matrix_values(
			27,  30,  33,
			61,  68,  75,
			95, 106, 117
		));
		
		// test
		m4 = m1.mul(m2);
		
		// assert
		assert(m3.eq(m4), "test_matrix_mul: error m3 != m4");
		assert(_check_structure(m4), "test_matrix_mul: error m4 structure");
	}
	
	void test_to_str() {
		Matrix_float m; string s1, s2;
		
		// prepare
		m = new Matrix_float(2, 3, matrix_values(
			1, 2,
			3, 4,
			5, 6
		));
		s1 = "[[1,2],[3,4],[5,6]]";
		
		// test
		s2 = m.to_str();
		
		// assert
		assert(s1 == s2, "test_to_str: error s1 != s2");
	}
	
	void test_matrix_zeros() {
		Matrix_float m1, m2;
		
		// prepare
		m1 = new Matrix_float(3, 2, matrix_values(
			0, 0, 0,
			0, 0, 0
		));
		
		// test
		m2 = matrix_zeros_float(3, 2);
		
		// assert
		assert(m1.eq(m2), "test_matrix_zeros: error m1 != m2");
		assert(_check_structure(m2), "test_matrix_zeros: error m2 structure");
	}
	
	void test_iterator() {
		Matrix_float m; MatrixIterator_float iter;
		
		// prepare
		m = new Matrix_float(2, 3, matrix_values(
			1, 2,
			3, 4,
			5, 6
		));
		
		// test, assert
		iter = m.begin();
		assert(iter.value() == 1, "test_iterator: error 1"); iter.shift();
		assert(iter.value() == 2, "test_iterator: error 2"); iter.shift();
		assert(iter.value() == 3, "test_iterator: error 3"); iter.shift();
		assert(iter.value() == 4, "test_iterator: error 4"); iter.shift();
		assert(iter.value() == 5, "test_iterator: error 5"); iter.shift();
		assert(iter.value() == 6, "test_iterator: error 6"); iter.shift();
		assert(iter.is_null());
	}
	
	void test_iterator_vertical() {
		Matrix_float m; MatrixIteratorVertical_float iter;
		
		// prepare
		m = new Matrix_float(3, 2, matrix_values(
			1, 3, 5,
			2, 4, 6
		));
		
		// test, assert
		iter = m.vbegin();
		assert(iter.value() == 1, "test_iterator_vertical: error 1"); iter.shift();
		assert(iter.value() == 2, "test_iterator_vertical: error 2"); iter.shift();
		assert(iter.value() == 3, "test_iterator_vertical: error 3"); iter.shift();
		assert(iter.value() == 4, "test_iterator_vertical: error 4"); iter.shift();
		assert(iter.value() == 5, "test_iterator_vertical: error 5"); iter.shift();
		assert(iter.value() == 6, "test_iterator_vertical: error 6"); iter.shift();
		assert(iter.is_null());
	}
	
	void test_copy() {
		Matrix_float m1, m2, m3, m4; MatrixElem_float r1;
		
		// prepare
		m1 = new Matrix_float(2, 2, r1 = matrix_values(
			1, 2,
			3, 4
		));
		m2 = new Matrix_float(2, 2, matrix_values(
			1, 2,
			3, 4
		));
		m3 = new Matrix_float(2, 2, matrix_values(
			0, 3,
			2, 4
		));
		
		// test
		m4 = m1.copy();
		m1.transpose_mut();
		r1.value = 0;
		
		// assert
		assert(m2.eq(m4), "test_copy: error incorrect copy");
		assert(m1.eq(m3), "test_copy: error unexpected change");
		assert(_check_structure(m1), "test_copy: error m1 structure");
		assert(_check_structure(m4), "test_copy: error m4 structure");
	}
	
	void test_determenant_0() {
		Matrix_float m; float d;
		
		// prepare
		m = new Matrix_float(3, 3, matrix_values(
			1, 2, 3,
			4, 5, 6,
			7, 8, 9
		));
		
		// test
		d = m.determenant();
		
		// assert
		assert(d == 0, "test_determenant_0: error");
	}
	
	void test_determenant() {
		Matrix_float m; float d;
		
		// prepare
		m = new Matrix_float(3, 3, matrix_values(
			2,  3, 4,
			9, 10, 5,
			8,  7, 6
		));
		
		// test
		d = m.determenant();
		
		// assert
		assert(abs(d + 60) < 0.001, "test_determenant: error");
	}
	
	void test_inverse() {
		Matrix_float m1, m2, m3;
		
		// prepare
		m1 = new Matrix_float(2, 2, matrix_values(
			0.5, -0.5,
			0.5,  0.5
		));
		m2 = new Matrix_float(2, 2, matrix_values(
			 1, 1,
			-1, 1
		));
		
		// test
		m3 = m1.inverse();
		
		// assert
		assert(m2.eq(m3), "test_inverse: error");
		assert(_check_structure(m3), "test_inverse: error m3 structure");
	}
	
	void test_transpose() {
		Matrix_float m1, m2, m3;
		
		// prepare
		m1 = new Matrix_float(3, 2, matrix_values(
			1, 2, 3,
			4, 5, 6
		));
		m2 = new Matrix_float(2, 3, matrix_values(
			1, 4,
			2, 5,
			3, 6
		));
		
		// test
		m3 = m1.transpose();
		
		// assert
		assert(m2.eq(m3), "test_transpose: error");
		assert(_check_structure(m3), "test_transpose: error m3 structure");
	}
	
	void test_transpose_mut() {
		Matrix_float m1, m2;
		
		// prepare
		m1 = new Matrix_float(3, 2, matrix_values(
			1, 2, 3,
			4, 5, 6
		));
		m2 = new Matrix_float(2, 3, matrix_values(
			1, 4,
			2, 5,
			3, 6
		));
		
		// test
		m1.transpose_mut();
		
		// assert
		assert(m1.eq(m2), "test_transpose_mut: error");
		assert(_check_structure(m1), "test_transpose_mut: error m1 structure");
	}
	
	void test_add_matrix() {
		Matrix_float m1, m2, m3;
		
		// prepare
		m1 = new Matrix_float(2, 2, matrix_values(
			1, 2,
			3, 4
		));
		m2 = new Matrix_float(2, 2, matrix_values(
			2, 3,
			4, 5
		));
		m3 = new Matrix_float(2, 2, matrix_values(
			3, 5,
			7, 9
		));
		
		// test
		m1.add_mut(m2);
		
		// assert
		assert(m1.eq(m3), "test_add_matrix: error");
		assert(_check_structure(m1), "test_add_matrix: error m1 structure");
	}
}

extern void Test_Matrix_float() {
	TestMatrix_float t();
	t.test_matrix_mul_e();
	t.test_matrix_mul();
	t.test_to_str();
	t.test_matrix_zeros();
	t.test_iterator();
	t.test_iterator_vertical();
	t.test_copy();
	t.test_determenant_0();
	t.test_determenant();
	t.test_inverse();
	t.test_transpose();
	t.test_transpose_mut();
	t.test_add_matrix();
	message("Tests passed", DisplayInfo);
}
