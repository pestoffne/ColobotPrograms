public class TestListInt extends EBoost {
	private ListInt list = null;
	
	void setup() {
		list = new ListInt();
		list.push_back(10);
		list.push_back(20);
		list.push_back(30);
	}
	
	void cleanup() {
		list.clear();
	}
	
	/*private*/ void _check_invariants() {
		ListBackwardIteratorInt it; ListElemInt elem; int front_count, back_count;
		
		front_count = 0;
		back_count = 0;
		
		for (it = list.rbegin(); not it.equals(list.rend()); it.shift()) {
			elem = it.get_elem();
			
			if (it.equals(list.begin())) {
				assert(elem.prev == null).id;
				++front_count;
			} else {
				assert(elem.prev.next == elem).id;
			}
			
			if (it.equals(list.rbegin())) {
				assert(elem.next == null).id;
				++back_count;
			} else {
				assert(elem.next.prev == elem).id;
			}
		}
		
		if (list.empty()) {
			assert_equal(list.back(), 0).id;
			assert_equal(list.front(), 0).id;
		} else {
			assert_equal(front_count, 1).id;
			assert_equal(back_count, 1).id;
		}
	}
	
	void test_push_back() {
		setup();
		
		list.push_back(40);
		
		assert_equal(list.front(), 10).id;
		assert_equal(list.back(), 40).id;
		assert_equal(list.size(), 4).id;
		_check_invariants();
		
		cleanup();
	}
	
	void test_push_front() {
		setup();
		
		list.push_front(0);
		
		assert_equal(list.front(), 0).id;
		assert_equal(list.back(), 30).id;
		assert_equal(list.size(), 4).id;
		_check_invariants();
		
		cleanup();
	}
	
	void test_insert() {
		ListForwardIteratorInt it_10, it_20, it_30, it;
		ListIteratorInt it_8, it_9, it_18, it_19, it_28, it_29, it_40, it_end;
		
		// prepare
		setup();
		it_10 = list.begin();
		it_20 = it_10.copy().shift();
		it_30 = it_20.copy().shift();
		it_end = list.end();
		
		// test
		it_8 = list.insert(it_10, 8);
		it_9 = list.insert(it_10, 9);
		it_18 = list.insert(it_20, 18);
		it_19 = list.insert(it_20, 19);
		it_28 = list.insert(it_30, 28);
		it_29 = list.insert(it_30, 29);
		it_40 = list.insert(it_end, 40);
		
		// assert
		assert_equal(it_8.value(), 8).id;
		assert_equal(it_9.value(), 9).id;
		assert_equal(it_10.value(), 10).id;
		assert_equal(it_18.value(), 18).id;
		assert_equal(it_19.value(), 19).id;
		assert_equal(it_20.value(), 20).id;
		assert_equal(it_28.value(), 28).id;
		assert_equal(it_29.value(), 29).id;
		assert_equal(it_30.value(), 30).id;
		assert_equal(it_40.value(), 40).id;
		
		assert_equal(list.front(), 8).id;
		assert_equal(list.back(), 40).id;
		
		it = list.begin();
		assert_equal(it.value(), 8).id;
		it.shift();
		assert_equal(it.value(), 9).id;
		it.shift();
		assert_equal(it.value(), 10).id;
		it.shift();
		assert_equal(it.value(), 18).id;
		it.shift();
		assert_equal(it.value(), 19).id;
		it.shift();
		assert_equal(it.value(), 20).id;
		it.shift();
		assert_equal(it.value(), 28).id;
		it.shift();
		assert_equal(it.value(), 29).id;
		it.shift();
		assert_equal(it.value(), 30).id;
		it.shift();
		assert_equal(it.value(), 40).id;
		it.shift();
		assert(it.equals(list.end())).id;
		
		assert_equal(list.size(), 10).id;
		_check_invariants();
		
		cleanup();
	}
	
	void test_pop_back() {
		setup();
		
		list.pop_back();
		
		assert_equal(list.front(), 10).id;
		assert_equal(list.back(), 20).id;
		assert_equal(list.size(), 2).id;
		_check_invariants();
		
		cleanup();
	}
	
	void test_pop_front() {
		setup();
		
		list.pop_front();
		
		assert_equal(list.front(), 20).id;
		assert_equal(list.back(), 30).id;
		assert_equal(list.size(), 2).id;
		_check_invariants();
		
		cleanup();
	}
	
	void test_pop_front_3() {
		setup();
		
		list.pop_front();
		list.pop_front();
		list.pop_front();
		
		assert_equal(list.front(), 0).id;
		assert_equal(list.back(), 0).id;
		assert_equal(list.size(), 0).id;
		assert(list.empty()).id;
		_check_invariants();
		
		cleanup();
	}
	
	void test_remove() {
		ListForwardIteratorInt it;
		
		// prepare
		setup();
		list.push_back(20);
		list.push_front(20);
		
		// test
		list.remove(20);
		
		// assert
		assert_equal(list.front(), 10).id;
		assert_equal(list.back(), 30).id;
		
		it = list.begin();
		assert_equal(it.value(), 10).id;
		it.shift();
		assert_equal(it.value(), 30).id;
		it.shift();
		assert(it.equals(list.end())).id;
		
		assert_equal(list.size(), 2).id;
		_check_invariants();
		
		cleanup();
	}
	
	void test_remove_if() {
		ListForwardIteratorInt it; UnaryPredicateInt pred;
		
		// prepare
		setup();
		list.push_front(0);
		pred = new UnaryPredicateMoreInt(10);
		
		// test
		list.remove_if(pred);
		
		// assert
		assert_equal(list.front(), 0).id;
		assert_equal(list.back(), 10).id;
		
		it = list.begin();
		assert_equal(it.value(), 0).id;
		it.shift();
		assert_equal(it.value(), 10).id;
		it.shift();
		assert(it.equals(list.end())).id;
		
		assert_equal(list.size(), 2).id;
		_check_invariants();
		
		cleanup();
	}
}

extern void Test_ListInt() {
	TestListInt t();
	t.test_push_back();
	t.test_push_front();
	t.test_insert();
	t.test_pop_back();
	t.test_pop_front();
	t.test_pop_front_3();
	t.test_remove();
	t.test_remove_if();
	message("Tests passed", DisplayInfo);
}
