// Generated file.
public class AffineCoordinateSystem3D {
private Matrix_float _m;

public void AffineCoordinateSystem3D(Matrix_float m) {
this._m = m;
}

public AffineCoordinateSystem3D translate(float dx, float dy , float dz) {
return new AffineCoordinateSystem3D(this._m.mul(
new Matrix_float(4, 4, matrix_values(




1, 0, 0, dx,
0, 1, 0, dy,
0, 0, 1, dz,
0, 0, 0, 1
))));
}

public AffineCoordinateSystem3D scale(float dx, float dy , float dz) {
return new AffineCoordinateSystem3D(this._m.mul(
new Matrix_float(4, 4, matrix_values(




dx, 0, 0, 0,
0, dy, 0, 0,
0, 0, dz, 0,
0, 0, 0, 1
))));
}

public AffineCoordinateSystem3D rotate(float angle) {
return new AffineCoordinateSystem3D(this._m.mul(
new Matrix_float(4, 4, matrix_values(




cos(angle), -sin(angle), 0, 0,
sin(angle), cos(angle), 0, 0,
0, 0, 1, 0,
0, 0, 0, 1
))));
}

public AffineCoordinateSystem3D invert_y() {
return this;
}

public point _(point pos) {
return _m2p_3d(this._m.mul(_p2m_3d(pos)).begin());
}
}

Matrix_float _p2m_3d(point pos) {
return new Matrix_float(1, 4, matrix_values(pos.x, pos.y, pos.z, 1));
}

point _m2p_3d(MatrixIterator_float iter) {
return new point(iter.value(), iter.shift().value() , iter.shift().value());
}

public AffineCoordinateSystem3D coordinate_system_from_matrix_3d(Matrix_float ab) {
ab.vstack_mut(new Matrix_float(4, 1, matrix_values(

0, 0, 0, 1
)));

return new AffineCoordinateSystem3D(ab);
}

public AffineCoordinateSystem3D coordinate_system_identity_3d() {
return new AffineCoordinateSystem3D(matrix_eye_float(4));
}

extern void Library_AffineCoordinateSystem3D() {
}
