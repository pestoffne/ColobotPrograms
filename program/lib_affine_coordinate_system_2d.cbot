// Generated file.
public class AffineCoordinateSystem2D {
private Matrix_float _m;

public void AffineCoordinateSystem2D(Matrix_float m) {
this._m = m;
}

public AffineCoordinateSystem2D translate(float dx, float dy ) {
return new AffineCoordinateSystem2D(this._m.mul(
new Matrix_float(3, 3, matrix_values(
1, 0, dx,
0, 1, dy,
0, 0, 1





))));
}

public AffineCoordinateSystem2D scale(float dx, float dy ) {
return new AffineCoordinateSystem2D(this._m.mul(
new Matrix_float(3, 3, matrix_values(
dx, 0, 0,
0, dy, 0,
0, 0, 1





))));
}

public AffineCoordinateSystem2D rotate(float angle) {
return new AffineCoordinateSystem2D(this._m.mul(
new Matrix_float(3, 3, matrix_values(
cos(angle), -sin(angle), 0,
sin(angle), cos(angle), 0,
0, 0, 1





))));
}

public AffineCoordinateSystem2D invert_y() {
return new AffineCoordinateSystem2D(this._m.mul(
new Matrix_float(3, 3, matrix_values(
1, 0, 0,
0, -1, 0,
0, 0, 1





))));
}

public AffineCoordinateSystem2D inverse() {
return new AffineCoordinateSystem2D(this._m.inverse());
}

public string to_str() {
return this._m.to_str();
}

public point _(point pos) {
return _m2p_2d(this._m.mul(_p2m_2d(pos)).begin());
}
}

Matrix_float _p2m_2d(point pos) {
return new Matrix_float(1, 3, matrix_values(pos.x, pos.y, 1));
}

point _m2p_2d(MatrixIterator_float iter) {
return new point(iter.value(), iter.shift().value() );
}

public AffineCoordinateSystem2D coordinate_system_from_matrix_2d(Matrix_float ab) {
ab.vstack_mut(new Matrix_float(3, 1, matrix_values(
0, 0, 1

)));

return new AffineCoordinateSystem2D(ab);
}

public AffineCoordinateSystem2D coordinate_system_identity_2d() {
return new AffineCoordinateSystem2D(matrix_eye_float(3));
}

extern void Library_AffineCoordinateSystem2D() {
}
