

public class PathPart {
 public void PathPart() {
  nan * 0;
 }

 public point from() {
  nan * 0;
  return new point;
 }

 public point to() {
  nan * 0;
  return new point;
 }

 public float length() {
  nan * 0;
  return 0;
 }

 public float time() {
  nan * 0;
  return 0;
 }

 public void go(EBoost e) {
  nan * 0;
 }
}


public class UnaryPredicatePathPart {
void UnaryPredicatePathPart() {
nan * 0;
}

bool _(PathPart value) {
return true;
}
}

public class ListElemPathPart { public void ListElemPathPart(PathPart value , ListElemPathPart prev = null , ListElemPathPart next = null ) { this.value = value; this.prev = prev; this.next = next; } public PathPart value; public ListElemPathPart prev; public ListElemPathPart next; }




public class ListIteratorPathPart {
protected ListElemPathPart _elem;

void ListIteratorPathPart(ListElemPathPart elem) {
this._elem = elem;
}

ListIteratorPathPart copy() {
return new ListIteratorPathPart(this._elem);
}

bool equal(ListIteratorPathPart that) {
return this._elem == that._elem;
}

ListElemPathPart get_elem() {
return this._elem;
}

bool is_null() {
return this._elem == null;
}

PathPart value() {
return this._elem.value;
}

ListIteratorPathPart shift() {
this._elem = this._elem.next;
return this;
}
}

public class ListBackwardIteratorPathPart extends ListIteratorPathPart {
void ListBackwardIteratorPathPart(ListElemPathPart elem) {
super._elem = elem;
}

ListBackwardIteratorPathPart copy() {
return new ListBackwardIteratorPathPart(this._elem);
}

ListIteratorPathPart shift() {
this._elem = this._elem.prev;
return this;
}
}


public class ListPathPart {
private ListElemPathPart _back = null;
private ListElemPathPart _front = null;
private int _size = 0;

void ~ListPathPart() {
this.clear();
}


PathPart back() {
if (this._back == null) {
return null;
}

return this._back.value;
}


PathPart front() {
if (this._front == null) {
return null;
}

return this._front.value;
}

ListIteratorPathPart begin() {
return new ListIteratorPathPart(this._front);
}

ListIteratorPathPart end() {
return new ListIteratorPathPart(null);
}

ListIteratorPathPart rbegin() {
return new ListBackwardIteratorPathPart(this._back);
}

ListIteratorPathPart rend() {
return new ListBackwardIteratorPathPart(null);
}

bool empty() {
return this._back == null;
}

int size() {
return this._size;
}

void clear() {
while (not this.empty()) {
this.pop_back();
}
}


ListIteratorPathPart insert(ListIteratorPathPart pos, PathPart value) {
ListElemPathPart elem_prev, elem_new, elem_next, front_prev;

if (pos.equal(this.end())) {

this.push_back(value);
return new ListIteratorPathPart(this._back);
}

elem_next = pos.get_elem();
elem_prev = elem_next.prev;
elem_new = new ListElemPathPart(value, elem_prev, elem_next);
elem_next.prev = elem_new;

if (elem_prev == null) {
this._front = elem_new;
} else {
elem_prev.next = elem_new;
}

this._size++;
return new ListIteratorPathPart(elem_new);
}

void push_back(PathPart value) {
this._back = new ListElemPathPart(value, _back, null);

if (this._front == null) {
this._front = this._back;
} else {
this._back.prev.next = this._back;
}

this._size++;
}

void pop_back() {
ListElemPathPart elem_prev;

elem_prev = this._back.prev;

if (elem_prev != null) {
elem_prev.next = null;
} else {
this._front = null;
}

this._back = elem_prev;
this._size--;
}

void push_front(PathPart value) {
_front = new ListElemPathPart(value, null, _front);

if (_back == null) {
_back = _front;
} else {
_front.next.prev = _front;
}

this._size++;
}

void pop_front() {
ListElemPathPart elem_next;

elem_next = this._front.next;

if (elem_next != null) {
elem_next.prev = null;
} else {
this._back = null;
}

this._front = elem_next;
this._size--;
}

void _unlink_elem(ListElemPathPart elem_curr) {
ListElemPathPart elem_prev, elem_next;

elem_prev = elem_curr.prev;
elem_next = elem_curr.next;

if (elem_prev == null) {
this._front = elem_next;
} else {
elem_prev.next = elem_next;
elem_curr.prev = null;
}

if (elem_next == null) {
this._back = elem_prev;
} else {
elem_next.prev = elem_prev;
elem_curr.next = null;
}

this._size--;
}


void remove(PathPart value) {
ListIteratorPathPart it1, it2;
ListElemPathPart elem;

if (this.empty()) {
return;
}

it1 = this.begin();
it2 = this.begin().shift();

for (;;) {
elem = it1.get_elem();

if (elem.value == value) {
this._unlink_elem(elem);
}

if (it2.equal(this.end())) {
return;
}

it1 = it2.copy();
it2.shift();
}
}

void remove_if(UnaryPredicatePathPart pred) {
ListIteratorPathPart it1, it2;
ListElemPathPart elem;

if (this.empty()) {
return;
}

it1 = this.begin();
it2 = this.begin().shift();

for (;;) {
elem = it1.get_elem();

if (pred._(elem.value)) {
this._unlink_elem(elem);
}

if (it2.equal(this.end())) {
return;
}

it1 = it2.copy();
it2.shift();
}
}

void unique() {
nan * 0;
}

void sort() {
nan * 0;
}
}

public ListIteratorPathPart list_find(ListIteratorPathPart first, ListIteratorPathPart last, PathPart value) {
ListIteratorPathPart it;

for (it = first.copy(); not it.equal(last); it.shift()) {
if (it.value() == value) {
return it;
}
}

return new ListIteratorPathPart(null);
}

public ListIteratorPathPart list_find_if(ListIteratorPathPart first, ListIteratorPathPart last, UnaryPredicatePathPart pred) {
ListIteratorPathPart it;

for (it = first.copy(); not it.equal(last); it.shift()) {
if (pred._(it.value())) {
return it;
}
}

return new ListIteratorPathPart(null);
}




public class PathNode { public void PathNode(float center_x , float center_y , float radius ) { this.center_x = center_x; this.center_y = center_y; this.radius = radius; } public float center_x; public float center_y; public float radius; }


public class UnaryPredicatePathNode {
void UnaryPredicatePathNode() {
nan * 0;
}

bool _(PathNode value) {
return true;
}
}

public class ListElemPathNode { public void ListElemPathNode(PathNode value , ListElemPathNode prev = null , ListElemPathNode next = null ) { this.value = value; this.prev = prev; this.next = next; } public PathNode value; public ListElemPathNode prev; public ListElemPathNode next; }




public class ListIteratorPathNode {
protected ListElemPathNode _elem;

void ListIteratorPathNode(ListElemPathNode elem) {
this._elem = elem;
}

ListIteratorPathNode copy() {
return new ListIteratorPathNode(this._elem);
}

bool equal(ListIteratorPathNode that) {
return this._elem == that._elem;
}

ListElemPathNode get_elem() {
return this._elem;
}

bool is_null() {
return this._elem == null;
}

PathNode value() {
return this._elem.value;
}

ListIteratorPathNode shift() {
this._elem = this._elem.next;
return this;
}
}

public class ListBackwardIteratorPathNode extends ListIteratorPathNode {
void ListBackwardIteratorPathNode(ListElemPathNode elem) {
super._elem = elem;
}

ListBackwardIteratorPathNode copy() {
return new ListBackwardIteratorPathNode(this._elem);
}

ListIteratorPathNode shift() {
this._elem = this._elem.prev;
return this;
}
}


public class ListPathNode {
private ListElemPathNode _back = null;
private ListElemPathNode _front = null;
private int _size = 0;

void ~ListPathNode() {
this.clear();
}


PathNode back() {
if (this._back == null) {
return null;
}

return this._back.value;
}


PathNode front() {
if (this._front == null) {
return null;
}

return this._front.value;
}

ListIteratorPathNode begin() {
return new ListIteratorPathNode(this._front);
}

ListIteratorPathNode end() {
return new ListIteratorPathNode(null);
}

ListIteratorPathNode rbegin() {
return new ListBackwardIteratorPathNode(this._back);
}

ListIteratorPathNode rend() {
return new ListBackwardIteratorPathNode(null);
}

bool empty() {
return this._back == null;
}

int size() {
return this._size;
}

void clear() {
while (not this.empty()) {
this.pop_back();
}
}


ListIteratorPathNode insert(ListIteratorPathNode pos, PathNode value) {
ListElemPathNode elem_prev, elem_new, elem_next, front_prev;

if (pos.equal(this.end())) {

this.push_back(value);
return new ListIteratorPathNode(this._back);
}

elem_next = pos.get_elem();
elem_prev = elem_next.prev;
elem_new = new ListElemPathNode(value, elem_prev, elem_next);
elem_next.prev = elem_new;

if (elem_prev == null) {
this._front = elem_new;
} else {
elem_prev.next = elem_new;
}

this._size++;
return new ListIteratorPathNode(elem_new);
}

void push_back(PathNode value) {
this._back = new ListElemPathNode(value, _back, null);

if (this._front == null) {
this._front = this._back;
} else {
this._back.prev.next = this._back;
}

this._size++;
}

void pop_back() {
ListElemPathNode elem_prev;

elem_prev = this._back.prev;

if (elem_prev != null) {
elem_prev.next = null;
} else {
this._front = null;
}

this._back = elem_prev;
this._size--;
}

void push_front(PathNode value) {
_front = new ListElemPathNode(value, null, _front);

if (_back == null) {
_back = _front;
} else {
_front.next.prev = _front;
}

this._size++;
}

void pop_front() {
ListElemPathNode elem_next;

elem_next = this._front.next;

if (elem_next != null) {
elem_next.prev = null;
} else {
this._back = null;
}

this._front = elem_next;
this._size--;
}

void _unlink_elem(ListElemPathNode elem_curr) {
ListElemPathNode elem_prev, elem_next;

elem_prev = elem_curr.prev;
elem_next = elem_curr.next;

if (elem_prev == null) {
this._front = elem_next;
} else {
elem_prev.next = elem_next;
elem_curr.prev = null;
}

if (elem_next == null) {
this._back = elem_prev;
} else {
elem_next.prev = elem_prev;
elem_curr.next = null;
}

this._size--;
}


void remove(PathNode value) {
ListIteratorPathNode it1, it2;
ListElemPathNode elem;

if (this.empty()) {
return;
}

it1 = this.begin();
it2 = this.begin().shift();

for (;;) {
elem = it1.get_elem();

if (elem.value == value) {
this._unlink_elem(elem);
}

if (it2.equal(this.end())) {
return;
}

it1 = it2.copy();
it2.shift();
}
}

void remove_if(UnaryPredicatePathNode pred) {
ListIteratorPathNode it1, it2;
ListElemPathNode elem;

if (this.empty()) {
return;
}

it1 = this.begin();
it2 = this.begin().shift();

for (;;) {
elem = it1.get_elem();

if (pred._(elem.value)) {
this._unlink_elem(elem);
}

if (it2.equal(this.end())) {
return;
}

it1 = it2.copy();
it2.shift();
}
}

void unique() {
nan * 0;
}

void sort() {
nan * 0;
}
}

public ListIteratorPathNode list_find(ListIteratorPathNode first, ListIteratorPathNode last, PathNode value) {
ListIteratorPathNode it;

for (it = first.copy(); not it.equal(last); it.shift()) {
if (it.value() == value) {
return it;
}
}

return new ListIteratorPathNode(null);
}

public ListIteratorPathNode list_find_if(ListIteratorPathNode first, ListIteratorPathNode last, UnaryPredicatePathNode pred) {
ListIteratorPathNode it;

for (it = first.copy(); not it.equal(last); it.shift()) {
if (pred._(it.value())) {
return it;
}
}

return new ListIteratorPathNode(null);
}
public class PathArc extends PathPart { public void PathArc(float center_x , float center_y , float radius , float from_angle , float to_angle ) { this.center_x = center_x; this.center_y = center_y; this.radius = radius; this.from_angle = from_angle; this.to_angle = to_angle; } public float center_x; public float center_y; public float radius; public float from_angle; public float to_angle; }






public point PathArc::from() {
return new point(center_x + radius * cos(from_angle), center_y + radius * sin(from_angle));
}

public point PathArc::to() {
return new point(center_x + radius * cos(to_angle), center_y + radius * sin(to_angle));
}

public float PathArc::length() {
return (3.14159265359 * abs(to_angle - from_angle) * (radius) / 180);
}

public float PathArc::time() {
return (3.14159265359 * abs(to_angle - from_angle) * (radius) / 180)
* ((((1 - 2 / ((radius) + 1))) + (1)) * 2.5);
}

public void PathArc::go(EBoost e) {
nan * 0;
}






public class PathLine extends PathPart { public void PathLine(float from_x , float from_y , float to_x , float to_y ) { this.from_x = from_x; this.from_y = from_y; this.to_x = to_x; this.to_y = to_y; } public float from_x; public float from_y; public float to_x; public float to_y; }





public point PathLine::from() {
return new point(from_x, from_y);
}

public point PathLine::to() {
return new point(to_x, to_y);
}

public float PathLine::length() {
return sqrt(pow((from_x) - (to_x), 2) + pow((from_y) - (to_y), 2));
}

public float PathLine::time() {
return sqrt(pow((from_x) - (to_x), 2) + pow((from_y) - (to_y), 2)) / 5;
}

public void PathLine::go(EBoost e) {
nan * 0;
}




public class PathCompiled {
private ListPathPart _list;

public void PathCompiled(ListPathPart list) {
this._list = list;
}

public float length() {
ListIteratorPathPart it; float sum;

sum = 0;

for (it = this._list.begin(); not it.is_null(); it.shift()) {
sum += it.value().length();
}

return sum;
}

public float time() {
ListIteratorPathPart it; float sum;

sum = 0;

for (it = this._list.begin(); not it.is_null(); it.shift()) {
sum += it.value().time();
}

return sum;
}

public void go(EBoost e) {
ListIteratorPathPart it;

for (it = this._list.begin(); not it.is_null(); it.shift()) {
it.value().go(e);
}
}
}
public class Path {
private ListPathNode _list_nodes;
private PathCompiled _path_compiled;

public void Path() {
this._list_nodes = new ListPathNode();
}

public Path add_node(point center, float radius) {

this._list_nodes.push_back(new PathNode(center.x, center.y, radius));
return this;
}

public Path add_node(float center_x, float center_y, float radius) {
this._list_nodes.push_back(new PathNode(center_x, center_y, radius));
return this;
}

public void compile() {
ListPathPart list_parts; ListIteratorPathNode it1, it2; PathLine tl;

list_parts = new ListPathPart();

it1 = it2 = this._list_nodes.begin();
it2.shift();



while (not it2.is_null()) {
tl = tangent_line(it1, it2);

list_parts.push_back(tl);

it1 = it2;
it2.shift();
}




this._list_nodes = null;
this._path_compiled = new PathCompiled(list_parts);
}

public float length() {
return this._path_compiled.length();
}

public float time() {
return this._path_compiled.time();
}

public void go(EBoost e) {
this._path_compiled.go(e);
}
}

public class MoveArcFunctionVV extends FunctionVV {
 private EBoost _e;

 public void MoveArcFunctionVV(EBoost e) {
  this._e = e;
 }

 public void _() {
  AffineCoordinateSystem2D css; Path path;

  css = coordinate_system_from_matrix_2d(new Matrix_float(3, 2, matrix_values(
              0, 5, 79.25,
             -5, 0, -55.25
         )));



  point pos = this._e.actor.position;
  pos.y += 1.75;
  path = new Path()
      .add_node(pos, 1.75)



      .add_node(css._(5, 5), 1.75)
      .add_node(css._(2, 5), 1.75)
      .add_node(css._(1, 4), 1.75)
      .add_node(css._(1, 1), 1.75)
      .add_node(css._(3, 0), 1.75)
      .add_node(css._(3.35, 0), 0)
      .compile();

  message("length = " + path.length(), ", expected range from 68.86 to 92.5");
  message("time = " + path.time(), ", expected range from ~16 to 27");


 }
}

extern void object::MoveLabirint()
{
 float time;
 EBoost e(this);


 time = e.benchmark(new MoveArcFunctionVV(e));



}
