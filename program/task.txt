public class CodeBattleBoost extends EBoost {
	static TaskList task_list;
	static BuildPositions build_positions;
	
	int goto_build(int cat) {
		return 0 +
		goto_p(build_positions.get(cat)) +
		drop() +
		build(cat);
	}
	
	bool same_river_side(object item) {
		return item.position.y * actor.position.y > 0;
	}
	
	void setup() {
		task_list.push(new GoalPowerPlant());
	}
	
	void loop() {
		Goal goal;
		
		goal = task_list.get();
		
		if (goal == null) {
			log("Task list is empty");
			wait(1);
			return;
		}
		
		log("get " + goal.to_str());
		goal.assign(actor);
		
		if (not goal.check_prerequirements()) {
			log("false preqs");
			return;
		}
		
		log("true preqs");
		
		if (goal.make() != 0) {
			log("make not ok");
			return;
		}
		
		log("pop");
		task_list.pop();
		wait(1);
	}
}

public class Goal {
	/*protected*/ CodeBattleBoost cb = new CodeBattleBoost();
	/*protected Goal[] depends; // unused */
	
	public void assign(object actor) {
		cb.actor = actor;
	}
	
	public bool check_prerequirements() {
		return false;
	}
	
	// Makes some to archieve goal
	// return: 0 if goal achieved, 1 on error
	public int make() {
		return 2;
	}
	
	public float get_resolve_time() {
		return 0;
	}
	
	public float get_close_time() {
		return get_resolve_time();
	}
	
	public string to_str() {
		return "Goal";
	}
	
	public bool equals(Goal goal) {
		return to_str() == goal.to_str();
	}
	
	/*protected*/ bool _add_goal(bool flag, Goal goal) {
		if (not flag) {
			cb.task_list.push_uniq(goal);
		}
		
		return flag;
	}
	
	/*protected*/ bool _required_item(int cat) {
		object item;
		cb.assert(cb.is_item(cat)).id;
		
		item = cb.radar_item(new RadarArgs(cat), true, true, false);  // TODO: fails here
		return item != null and cb.same_river_side(item);
	}
	
	/*protected*/ bool _required_structure(int cat) {
		object item;
		cb.assert(cb.is_structure(cat)).id;
		
		item = radar(cat);
		return item != null and cb.same_river_side(item) and not item.busy() and not cb.is_blocked(item);
	}
}

public class GoalResource extends Goal {
	public string to_str() {
		return "GoalResource";
	}
}

public class GoalTitanium extends GoalResource {
	public bool check_prerequirements() {
		return true
		and _add_goal(_required_structure(Converter), new GoalConverter())
		and _required_item(TitaniumOre);
	}
	
	public int make() {
		return 0 +
		cb.goto_grab(TitaniumOre) +
		cb.goto_radar_position(new RadarArgs(Converter)) +
		drop() +
		move(-2.5);
	}
	
	public float get_resolve_time() {
		return 2 + 0.5 + 2 + 0.5;
	}
	
	public float get_close_time() {
		return get_resolve_time() + 15/*convert*/;
	}
	
	public string to_str() {
		return "GoalTitanium";
	}
}

public class GoalPowerCell extends GoalResource {
	public bool check_prerequirements() {
		return true
		and _add_goal(_required_structure(PowerPlant), new GoalPowerPlant())
		and _required_item(Titanium);
	}
	
	public int make() {
		return 0 +
		cb.goto_grab(Titanium) +
		cb.goto_radar_position(new RadarArgs(PowerPlant)) +
		grab();  // grab_from_slot
	}
	
	public float get_resolve_time() {
		return 0.5 + 2 + 0.5 + 2;
	}
	
	public float get_close_time() {
		return get_resolve_time() + 12/*convert*/;
	}
	
	public string to_str() {
		return "GoalPowerCell";
	}
} 

public class GoalStructure extends Goal {
	protected int cat;
	
	void GoalStructure(int cat) {
		cb.assert(cb.is_structure(cat)).id;
		this.cat = cat;
	}
	
	public bool check_prerequirements() {
		return _add_goal(_required_item(Titanium), new GoalTitanium());
	}
	
	public int make() {
		cb.log("GoalStructure::make");
		
		return 0 +
		cb.goto_grab(Titanium) +
		cb.goto_build(cat);
	}
	
	public float get_resolve_time() {
		return 2 + 0.5 + 15/*build*/ + 2;
	}
	
	public string to_str() {
		return "GoalStructure";
	}
}

public class GoalConverter extends GoalStructure {
	public void GoalConverter() {
		super.cat = Converter;
	}
	
	public string to_str() {
		return "GoalConverter";
	}
}

public class GoalPowerPlant extends GoalStructure {
	public void GoalPowerPlant() {
		super.cat = PowerPlant;
	}
	
	public bool check_prerequirements() {
		return super.check_prerequirements()
		and _add_goal(_required_structure(Converter), new GoalStructure(Converter));
	}
	
	public string to_str() {
		return "GoalPowerPlant";
	}
}

public class TaskList {
	static CodeBattleBoost cb;
	private Goal[] task_list_;
	private int task_index_ = 0;
	private object exit_ = null;
	
	public void push_uniq(Goal goal) {
		int i;
		
		if (task_index_ > 30) {
			cb.log("Task list is overflow. Exit program");
			exit_.id;
		}
		
		for (i = 1; i < task_index_ and not task_list_[i - 1].equals(goal); ++i) { }
		
		for (;i < task_index_; ++i) {
			task_list_[i - 1] = task_list_[i];
		}
		
		cb.log("push " + goal.to_str());
		task_list_[task_index_++] = goal;
	}
	
	public void push(Goal goal) {
		if (task_index_ > 30) {
			cb.log("Task list is overflow. Exit program");
			exit_.id;
		}
		
		cb.log("push " + goal.to_str());
		task_list_[task_index_++] = goal;
	}
	
	public Goal pop() {
		if (task_index_ <= 0) {
			return null;
		}
		
		return task_list_[--task_index_];
	}
	
	public Goal get() {
		if (task_index_ <= 0) {
			return null;
		}
		
		return task_list_[task_index_ - 1];
	}
	
	public void solve() {
		
	}
	
	public void close() {
		
	}
}

public class BuildPositions {
	int converters_index = 2;
	int power_plants_index = 1;
	int general_index = 1;
	
	point team_transform(point p) {
		/*if (team == 2) {
			p.x *= -1;
			p.y *= -1;
			p.z = 180 + p.z
		}*/
		
		return p;
	}
	
	point get(int cat) {
		if (cat == Converter) {
			if (converters_index > 0) {
				point[] converters;
				converters[0] = team_transform(new point(5, -50.5, 315));
				converters[1] = team_transform(new point(-5, -50.5, 225));
				return converters[--converters_index];
			}
		} else if (cat == PowerPlant) {
			point[] power_plants;
			power_plants[0] = team_transform(new point(5, -44, 10));
			if (power_plants_index > 0) {
				return power_plants[--power_plants_index];
			}
		}
		
		point[] general;
		general[0] = team_transform(new point(-8, -42, 150));
		return general[--general_index];
	}
}

extern void object::cb_goals() {
	CodeBattleBoost cb();
	
	// init cb
	cb.actor = this;
	
	// init static variables
	cb.task_list = new TaskList();
	cb.task_list.cb = cb;
	cb.build_positions = new BuildPositions();
	
	cb.setup();
	
	for (;;) {
		cb.loop();
	}
}

// WingedShooter x N
// 0) BotFactory
// 1) PowerPlant (to make PowerCell x N)
// 2) Converter (to make Titanium x N)
// 3) ResearchWinged
// 3.1) ResearchCenter
// 4) ResearchShooter
// 4.1) link to 3.1

// WingedGrabber ()
// 1) Titanium ()
// 2) PowerCell ()
// 2.1) Titanium ()
// 3) BotFactory ()
// 3.1) Titanium ()
// 4) ResearchWinged ()
// 4.1) PowerCell (full)
// 4.1.1) Titanium ()
// 4.1.2) PowerPlant ()
// 4.1.2.1) Titanium ()
// 4.2) ResearchCenter ()
// 4.2.1) Titanium ()
// 4.2.1.1) Converter ()
// 4.2.1.1.1) Titanium (v)

// For WingedGrabber
// T x 7
// C x 2

// For WingedShooter
// T x 10
// C x 4
