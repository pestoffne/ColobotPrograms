// Round(5.751, 1) --> 5.8
float Round(float value, int digits) {
	int a = pow(10, digits);
	return round(value * a) / a;
}

string _(string key, int value) {
	if (value == 0) {
		return "";
	}
	
	return key + "(" + value + ") ";
}

string _(string key, float value, int base) {
	if (base == 0) {
		return "";
	}
	
	return key + "(" + value + " / " + base + ") ";
}

float Max(float a, float b) {
	if (a > b) {
		return a;
	}
	
	return b;
}

extern void object::CountResources() {
	int bots[]; object[] items; float power_cells_charge_sum; float nuclear_cells_charge_sum; int i;
	int titanium_count, titanium_ores_count, power_cells_count, nuclear_cells_count, uranium_ores_count, black_boxes_count, orga_matters_count, tnt_count, wreck_count;
	
	i = 0;
	
	bots[i++] = WheeledGrabber;
	bots[i++] = TrackedGrabber;
	bots[i++] = WingedGrabber;
	bots[i++] = LeggedGrabber;
	
	bots[i++] = WheeledSniffer;
	bots[i++] = TrackedSniffer;
	bots[i++] = WingedSniffer;
	bots[i++] = LeggedSniffer;
	
	bots[i++] = WheeledShooter;
	bots[i++] = TrackedShooter;
	bots[i++] = WingedShooter;
	bots[i++] = LeggedShooter;
	
	bots[i++] = WheeledOrgaShooter;
	bots[i++] = TrackedOrgaShooter;
	bots[i++] = WingedOrgaShooter;
	bots[i++] = LeggedOrgaShooter;
	
	bots[i++] = Subber;
	bots[i++] = Recycler;
	bots[i++] = Shielder;
	bots[i++] = Thumper;
	bots[i++] = PhazerShooter;
	
	bots[i++] = PracticeBot;
	bots[i++] = TargetBot;
	
	bots[i++] = PowerPlant;
	bots[i++] = NuclearPlant;
	bots[i++] = ResearchCenter;
	bots[i++] = DefenseTower;
	
	titanium_count = sizeof(radarall(Titanium));
	titanium_ores_count = sizeof(radarall(TitaniumOre));
	uranium_ores_count = sizeof(radarall(UraniumOre));
	black_boxes_count = sizeof(radarall(BlackBox));
	orga_matters_count = sizeof(radarall(OrgaMatter));
	tnt_count = sizeof(radarall(TNT));
	wreck_count = sizeof(radarall(Wreck));
	
	items = radarall(PowerCell);
	power_cells_count = sizeof(items);
	
	power_cells_charge_sum = 0;
	for (int i = sizeof(items) - 1; i >= 0; --i) {
		power_cells_charge_sum += Max(items[i].energyLevel, 0);
	}
	
	items = radarall(NuclearCell);
	nuclear_cells_count = sizeof(items);
	
	nuclear_cells_charge_sum = 0;
	for (int i = sizeof(items) - 1; i >= 0; --i) {
		nuclear_cells_charge_sum += Max(items[i].energyLevel, 0);
	}
	
	// Count current bot's PowerCell or NuclearCell in EnercyCell slot
	if (energyCell.category == PowerCell) {
		power_cells_count++;
		power_cells_charge_sum += Max(energyCell.energyLevel, 0);
	} else if (energyCell.category == NuclearCell) {
		nuclear_cells_count++;
		nuclear_cells_charge_sum += Max(energyCell.energyLevel, 0);
	} else {
		message("Unexpected cell type", DisplayError);
		return;
	}
	
	// Count current bot's loaded (= grabbed) item
	if (load != null) {
		if (load.category == Titanium) {
			titanium_count++;
		} else if (load.category == TitaniumOre) {
			titanium_ores_count++;
		} else if (load.category == PowerCell) {
			power_cells_count++;
			power_cells_charge_sum += Max(load.energyLevel, 0);
		} else if (load.category == NuclearCell) {
			nuclear_cells_count++;
			nuclear_cells_charge_sum += Max(load.energyLevel, 0);
		} else if (load.category == UraniumOre) {
			uranium_ores_count++;
		} else if (load.category == BlackBox) {
			black_boxes_count++;
		} else if (load.category == OrgaMatter) {
			orga_matters_count++;
		} else if (load.category == TNT) {
			tnt_count++;
		} else {
			// may be key
		}
	}
	
	// Count PowerCells and NuclearCells inserted into bots
	// Count items loaded by Grubbers
	items = radarall(bots);
	for (int i = sizeof(items) - 1; i >= 0; --i) {
		if (items[i].energyCell != null) {
			if (items[i].energyCell.category == PowerCell) {
				power_cells_count++;
				power_cells_charge_sum += Max(items[i].energyCell.energyLevel, 0);
			} else if (items[i].energyCell.category == NuclearCell) {
				nuclear_cells_count++;
				nuclear_cells_charge_sum += Max(items[i].energyCell.energyLevel, 0);
			} else {
				message("Unexpected cell type", DisplayError);
				return;
			}
		}
		
		if (items[i].load != null) {
			if (items[i].load.category == Titanium) {
				titanium_count++;
			} else if (items[i].load.category == TitaniumOre) {
				titanium_ores_count++;
			} else if (items[i].load.category == PowerCell) {
				power_cells_count++;
				power_cells_charge_sum += Max(items[i].load.energyLevel, 0);
			} else if (items[i].load.category == NuclearCell) {
				nuclear_cells_count++;
				nuclear_cells_charge_sum += Max(items[i].load.energyLevel, 0);
			} else if (items[i].load.category == UraniumOre) {
				uranium_ores_count++;
			} else if (items[i].load.category == BlackBox) {
				black_boxes_count++;
			} else if (items[i].load.category == OrgaMatter) {
				orga_matters_count++;
			} else if (items[i].load.category == TNT) {
				tnt_count++;
			} else {
				// may be key
			}
		}
	}
	
	message(_("Titanium", titanium_count)
	      + _("TitaniumOre", titanium_ores_count)
	      + _("PowerCell", Round(power_cells_charge_sum, 1), power_cells_count)
	      + _("NuclearCell", Round(nuclear_cells_charge_sum, 1), nuclear_cells_count)
	      + _("UraniumOre", uranium_ores_count)
	      + _("BlackBox", black_boxes_count)
	      + _("OrgaMatter", orga_matters_count)
	      + _("TNT", tnt_count)
	      + _("Wreck", wreck_count));
}
