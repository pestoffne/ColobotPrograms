// Generated file.




public point predict_position_arc(
float dt, point position, point velocity, float motor_left, float motor_right) {
AffineCoordinateSystem2D css, csi; float radius, velocity_a, velocity_b, angle;


css = coordinate_system_from_2_points_2d(
position.x, position.y, position.x + velocity.x, position.y + velocity.y);

velocity_a = sqrt(pow(velocity.x, 2) + pow(velocity.y, 2));
velocity_b = (((motor_left) + (motor_right)) * 2.5);



radius = (2 / (1 - (((motor_left) < (motor_right) ? (motor_left) : (motor_right)))) - 1);
angle = velocity_a * dt * 180 / 3.14159265359 / radius;

return css._(
radius * sin(angle),
radius * (1 - cos(angle)) * (motor_left < motor_right ? 1 : -1)
);
}




public class PathCompiled {
private ListPathPart _list;

public void PathCompiled(ListPathPart list) {
this._list = list;
}

public float length() {
ListIteratorPathPart it; float sum;

sum = 0;

for (it = this._list.begin(); not it.is_null(); it.shift()) {
sum += it.value().length();
}

return sum;
}

public float time() {
ListIteratorPathPart it; float sum;

sum = 0;

for (it = this._list.begin(); not it.is_null(); it.shift()) {
sum += it.value().time();
}

return sum;
}

public void go(EBoost e) {
}

public void debug_dump(string filename) {
ListIteratorPathPart it; file f;

f = new file();
f.open(filename, "w");

for (it = this._list.begin(); not it.is_null(); it.shift()) {
f.writeln(it.value().to_str());
}

f.close();
}
}
