// Generated file.







public class PathLine extends PathPart { public void PathLine(float from_x , float from_y , float to_x , float to_y ) { this.from_x = from_x; this.from_y = from_y; this.to_x = to_x; this.to_y = to_y; } public float from_x; public float from_y; public float to_x; public float to_y; }





public point PathLine::from() {
return new point(from_x, from_y);
}

public point PathLine::to() {
return new point(to_x, to_y);
}

public float PathLine::length() {
return sqrt(pow((from_x) - (to_x), 2) + pow((from_y) - (to_y), 2));
}

public float PathLine::time() {
return sqrt(pow((from_x) - (to_x), 2) + pow((from_y) - (to_y), 2)) / 5;
}

public void PathLine::go(EBoost e) {
nan * 0;
}

public string PathLine::to_str() {
return "PathLine(from_x=" + (round((from_x) * 100) / 100) + ", from_y=" + (round((from_y) * 100) / 100)
+ ", to_x=" + (round((to_x) * 100) / 100) + ", to_y=" + (round((to_y) * 100) / 100) + ")";
}

public PathLine tangent_line(PathNode c1, PathNode c2) {
AffineCoordinateSystem2D cs; point p1, p2; float dist, pm, mp, from_x, from_y, to_x, to_y;

dist = sqrt(pow((c1.center_x) - (c2.center_x), 2) + pow((c1.center_y) - (c2.center_y), 2));
mp = dist - c1.radius + c2.radius;
pm = dist + c1.radius - c2.radius;


from_x = sqrt(mp * pm) * c1.radius / dist;
from_y = sqrt(pow(c1.radius, 2) - pow(from_x, 2));


to_x = (pow(dist, 2) + c1.radius * c2.radius - pow(c2.radius, 2)) / dist;
to_y = sqrt(pow(c2.radius, 2) - pow(to_x, 2) + pow(dist, 2));

cs = coordinate_system_from_2_points_2d(c1.center_x, c1.center_y, c2.center_x, c2.center_y);
p1 = cs._(from_x, from_y);
p2 = cs._(to_x, to_y);
return new PathLine(p1.x, p1.y, p2.x, p2.y);
}
