#include <macro.cbot>

NAMED_TUPLE(CAT(MatrixElem_, TYPE), 3,
	TYPE, value, = NULL,
	CAT(MatrixElem_, TYPE), right, = null,
	CAT(MatrixElem_, TYPE), down, = null)

#define MATRIX_VALUES_ARGUMENT(number, ...) , TYPE v##number
#define MATRIX_VALUES_ASSIGN(number, ...) p1 = p1.right = new CAT(MatrixElem_, TYPE)(v##number);
#define MATRIX_VALUES(count) \
	public CAT(MatrixElem_, TYPE) matrix_values(TYPE v0 REPEAT(count, MATRIX_VALUES_ARGUMENT)) { \
		CAT(MatrixElem_, TYPE) p0, p1; \
		p0 = p1 = new CAT(MatrixElem_, TYPE)(v0); \
		REPEAT(count, MATRIX_VALUES_ASSIGN) \
		return p0; \
	}

MATRIX_VALUES(5)
MATRIX_VALUES(8)
MATRIX_VALUES(80)

public class CAT(MatrixIterator_, TYPE) {
	protected CAT(MatrixElem_, TYPE) _elem;
	
	public void CAT(MatrixIterator_, TYPE)(CAT(MatrixElem_, TYPE) elem) {
		this._elem = elem;
	}
	
	public CAT(MatrixIterator_, TYPE) copy() {
		return new CAT(MatrixIterator_, TYPE)(this._elem);
	}
	
	public bool equal(CAT(MatrixIterator_, TYPE) that) {
		return this._elem == that._elem;
	}
	
	public bool is_null() {
		return this._elem == null;
	}
	
	public TYPE value() {
		return this._elem.value;
	}
	
	public CAT(MatrixIterator_, TYPE) shift() {
		this._elem = this._elem.right;
		return this;
	}
}

public class CAT(Matrix_, TYPE) {
	private CAT(MatrixElem_, TYPE) _root;
	private int _width;
	private int _height;
	
	private void _set_shape() {
		CAT(MatrixElem_, TYPE) p1, p2;
		
		p1 = p2 = this._root;
		
		repeat(this._width) {
			p1 = p1.right;
		}
		
		for (;;) {
			p2.down = p1;
			
			if (p1.right == null) {
				break;
			}
			
			p1 = p1.right;
			p2 = p2.right;
		}
		
		p1 = this._root;
		
		repeat(this._width - 1) {
			p1 = p1.right;
			p2 = p2.right;
			p2.down = p1;
		}
	}
	
	public void CAT(Matrix_, TYPE)(int width, int height, CAT(MatrixElem_, TYPE) values) {
		this._width = width;
		this._height = height;
		this._root = values;
		this._set_shape();
	}
	
	public CAT(MatrixIterator_, TYPE) begin() {
		return new CAT(MatrixIterator_, TYPE)(this._root);
	}
	
	public CAT(MatrixIterator_, TYPE) end() {
		return new CAT(MatrixIterator_, TYPE)(null);
	}
	
	public bool eq(CAT(Matrix_, TYPE) that) {
		CAT(MatrixElem_, TYPE) p1, p2;
		
		if (this._width != that._width or this._height != that._height) {
			return false;
		}
		
		p1 = this._root;
		p2 = that._root;
		
		repeat(this._width * this._height) {
			if (p1.value != p2.value) {
				return false;
			}
			
			p1 = p1.right;
			p2 = p2.right;
		}
		
		return true;
	}
	
	public bool ne(CAT(Matrix_, TYPE) that) {
		return not this.eq(that);
	}
	
	public string to_str() {
		string res; CAT(MatrixIterator_, TYPE) iter;
		
		iter = this.begin();
		res = "[";
		
		for (int i = this._height - 1;; --i) {
			res += "[";
			
			for (int j = this._width - 1;; --j) {
				res += iter.value();
				iter.shift();
				
				if (j <= 0) {
					break;
				}
				
				res += ",";
			}
			
			res += "]";
			
			if (i <= 0) {
				break;
			}
			
			res += ",";
		}
		
		res += "]";
		return res;
	}
	
	private CAT(MatrixElem_, TYPE) _mul_helper(CAT(MatrixElem_, TYPE) p_this, CAT(MatrixElem_, TYPE) p_that) {
		CAT(MatrixElem_, TYPE) acc;
		
		acc = new CAT(MatrixElem_, TYPE)();
		repeat(this._width) {
			acc.value += p_this.value * p_that.value;
			p_this = p_this.right;
			p_that = p_that.down;
		}
		
		return acc;
	}
	
	public CAT(Matrix_, TYPE) mul(CAT(Matrix_, TYPE) that) {
		CAT(MatrixElem_, TYPE) p_this, p_that, p_out, p_dummy; CAT(Matrix_, TYPE) res;
		
		if (this._width != that._height) {
			message("Can't multiply matrixes due it's sizes", DisplayError);
			return null;
		}
		
		p_this = this._root;
		p_that = that._root;
		p_dummy = p_out = new CAT(MatrixElem_, TYPE)();
		
		repeat(this._height) {
			repeat(that._width) {
				p_out = p_out.right = this._mul_helper(p_this, p_that);
				p_that = p_that.right;
			}
			p_this = p_this.down;
			p_that = that._root;
		}
		
		res = new CAT(Matrix_, TYPE)(this._height, that._width, p_dummy.right);
		return res;
	}
}

extern void CAT(Library_Matrix_, TYPE)() {
}
