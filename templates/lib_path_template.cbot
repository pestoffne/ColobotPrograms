// Depends:
// lib_path_node.cbot
// lib_list_path_node.cbot
// lib_path_part.cbot
// lib_list_path_part.cbot
// lib_path_compiled.cbot
#include <macro.cbot>

public class Path {
	private ListPathNode _list_nodes;
	private PathCompiled _path_compiled;
	private point _start;
	
	public void Path(point start) {
		this._start = start;
		this._list_nodes = new ListPathNode();
	}
	
	public Path add_node(point center, float radius) {
		// assume 2D point for path
		this._list_nodes.push_back(new PathNode(center.x, center.y, radius));
		return this;
	}
	
#if 0
	public Path add_node(float center_x, float center_y, float radius) {
		this._list_nodes.push_back(new PathNode(center_x, center_y, radius));
		return this;
	}
#endif
	
	public Path compile() {
		ListPathPart list_parts; ListIteratorPathNode it1, it2; PathLine line; float px, py;
		
		list_parts = new ListPathPart();
		
		it1 = this._list_nodes.begin();
		it2 = it1.copy().shift();
		px = this._start.x;
		py = this._start.y;
		
		while (not it2.is_null()) {
			line = tangent_line(it1.value(), it2.value());
			list_parts.push_back(new PathArc(
			    px, py, line.from_x, line.from_y,
			    it1.value().center_x, it1.value().center_y, it1.value().radius
			));
			list_parts.push_back(line);
			
			px = line.to_x;
			py = line.to_y;
			it1.shift();
			it2.shift();
		}
		
		this._list_nodes = null;
		this._path_compiled = new PathCompiled(list_parts);
		return this;
	}
	
	public float length() {
		return this._path_compiled.length();
	}
	
	public float time() {
		return this._path_compiled.time();
	}
	
	public void go(EBoost e) {
		this._path_compiled.go(e);
	}
	
	public void debug_dump(string filename="debug_dump_path.txt") {
		this._path_compiled.debug_dump(filename);
	}
}
