// Depends:
// lib_list_pathpart.cbot
#include <macro.cbot>

#define TIME_DELTA 1.0
#define TIME_TICK 0.1

/*private*/ point predict_position_arc(
float dt, point position, point velocity, float motor_left, float motor_right) {
	AffineCoordinateSystem2D css, csi; float radius, velocity_a, velocity_b, angle;
	
	css = coordinate_system_from_2_points_2d(
		position.x, position.y, position.x + velocity.x, position.y + velocity.y);
	csi = css.inverse();
	
	velocity_a = VECTOR_LENGTH(velocity.x, velocity.y);
	velocity_b = PREDICT_VELOCITY(motor_left, motor_right);
	message("velocity_a = " + velocity_a + ", velocity_b = " + velocity_b);
	
	// assume motor_left or motor_right is 1
	radius = MOTOR_VALUE_TO_RADIUS(MIN(motor_left, motor_right));
	angle = velocity_a * TIME_DELTA * 180 / PI / radius;
	
	return new point(
		csi._(radius * sin(angle)),
		csi._(radius * (1 - cos(angle)) * (motor_left < motor_right ? 1 : -1))
	);
}

public class PathCompiled {
	private ListPathPart _list;
	
	public void PathCompiled(ListPathPart list) {
		this._list = list;
	}
	
	public float length() {
                ListIteratorPathPart it; float sum;
		
		sum = 0;
		
                for (it = this._list.begin(); not it.is_null(); it.shift()) {
                        sum += it.value().length();
                }
		
                return sum;
	}
	
	public float time() {
		ListIteratorPathPart it; float sum;
		
		sum = 0;
		
		for (it = this._list.begin(); not it.is_null(); it.shift()) {
			sum += it.value().time();
		}
		
		return sum;
	}
	
	public void go(EBoost e) {
		PID pid; ListIteratorPathPart it1, it2; point pos_predict, pos_expect;
		float error, prev_pr, curr_pr, diff_pr;
		
		pid = new PID(1, 0, 1, TIME_DELTA);
		it1 = this._list.begin();
		it2 = it1.copy();
		prev_pr = curr_pr = 0;
		
		LOOP {
			if (it1.is_null()) {
				break;
			}
			
			curr_pr = it1.value().get_progress(e.actor.position);
			pos_predict = predict_position_arc(TIME_DELTA, e.actor.position,
				e.get_velocity(e.actor.velocity), motor_left, motor_right);
			pos_expect = BAR(it2.value(), ...);
			
			error = foo(pos_predict, pos_expect);
			
			_ = pid.compute(error);
			
			motor(_, _);
			wait(TIME_TICK);
		}
	}
	
	public void debug_dump(string filename) {
		ListIteratorPathPart it; file f;
		
		f = new file();
		f.open(filename, "w");
		
		for (it = this._list.begin(); not it.is_null(); it.shift()) {
			f.writeln(it.value().to_str());
		}
		
		f.close();
	}
}
