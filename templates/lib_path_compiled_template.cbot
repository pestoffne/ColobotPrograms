// Depends:
// lib_list_pathpart.cbot
#include <macro.cbot>

#define PROGRESS_DELTA 3.0
#define TIME_DELTA 0.1

public class PathCompiled {
	private ListPathPart _list;
	
	public void PathCompiled(ListPathPart list) {
		this._list = list;
	}
	
	public float length() {
                ListIteratorPathPart it; float sum;
		
		sum = 0;
		
                for (it = this._list.begin(); not it.is_null(); it.shift()) {
                        sum += it.value().length();
                }
		
                return sum;
	}
	
	public float time() {
		ListIteratorPathPart it; float sum;
		
		sum = 0;
		
		for (it = this._list.begin(); not it.is_null(); it.shift()) {
			sum += it.value().time();
		}
		
		return sum;
	}
	
	public void go(EBoost e) {
		PID pid; ListIteratorPathPart it1, it2; point pos_predict, pos_expect;
		float error, prev_pr, curr_pr, diff_pr;
		
		pid = new PID(1, 0, 1, TIME_DELTA);
		it1 = this._list.begin();
		it2 = it1.copy();
		prev_pr = curr_pr = 0;
		
		LOOP {
			if (it1.is_null()) {
				break;
			}
			
			curr_pr = it1.value().get_progress(e.actor.position);
			pos_predict = it1.value().get_position(curr_pr + PROGRESS_DELTA);
			pos_expect = BAR(it2.value(), ...);
			
			error = foo(pos_predict, pos_expect);
			
			_ = pid.compute(error);
			
			motor(_, _);
			wait(TIME_DELTA);
		}
	}
	
	public void debug_dump(string filename) {
		ListIteratorPathPart it; file f;
		
		f = new file();
		f.open(filename, "w");
		
		for (it = this._list.begin(); not it.is_null(); it.shift()) {
			f.writeln(it.value().to_str());
		}
		
		f.close();
	}
}
