#define MAP_TRIPLET(count, macro, ...) MT_ ## count(macro, __VA_ARGS__)
#define MT_1(m, a, b, c) m(a, b, c)
#define MT_2(m, a, b, c, ...) m(a, b, c, __VA_ARGS__) MT_1(m, __VA_ARGS__)
#define MT_3(m, a, b, c, ...) m(a, b, c, __VA_ARGS__) MT_2(m, __VA_ARGS__)
#define MT_4(m, a, b, c, ...) m(a, b, c, __VA_ARGS__) MT_3(m, __VA_ARGS__)
#define MT_5(m, a, b, c, ...) m(a, b, c, __VA_ARGS__) MT_4(m, __VA_ARGS__)
#define MT_6(m, a, b, c, ...) m(a, b, c, __VA_ARGS__) MT_5(m, __VA_ARGS__)
#define MT_7(m, a, b, c, ...) m(a, b, c, __VA_ARGS__) MT_6(m, __VA_ARGS__)
#define MT_8(m, a, b, c, ...) m(a, b, c, __VA_ARGS__) MT_7(m, __VA_ARGS__)

#define ARGUMENT(type, name, default, ...) type name default __VA_OPT__(,)
#define ASSIGN(type, name, ...) this.name = name;
#define FIELD(type, name, ...) public type name;

#define NAMED_TUPLE(tuple_name, count, ...) \
	public class tuple_name { \
		public void tuple_name(MAP_TRIPLET(count, ARGUMENT, __VA_ARGS__)) { \
			MAP_TRIPLET(count, ASSIGN, __VA_ARGS__) \
		} \
		MAP_TRIPLET(count, FIELD, __VA_ARGS__) \
	}
